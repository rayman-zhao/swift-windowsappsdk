// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_Windows_ApplicationModel_Resources {
    public enum IResourceContextBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceContext
        public typealias SwiftABI = __ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceContext
        public typealias SwiftProjection = AnyIResourceContext
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IResourceContextImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceContextVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IResourceContextImpl: IResourceContext, WinRTAbiImpl {
        fileprivate typealias Bridge = IResourceContextBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcecontext.qualifiervalues)
        fileprivate var qualifierValues : WindowsFoundation.AnyIMap<String, String>! {
            get { try! _default.get_QualifierValues() }
        }

    }

    public enum IResourceManagerBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceManager
        public typealias SwiftABI = __ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceManager
        public typealias SwiftProjection = AnyIResourceManager
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IResourceManagerImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceManagerVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IResourceManagerImpl: IResourceManager, WinRTAbiImpl {
        fileprivate typealias Bridge = IResourceManagerBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcemanager.createresourcecontext)
        fileprivate func createResourceContext() throws -> ResourceContext! {
            try _default.CreateResourceContext()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcemanager.mainresourcemap)
        fileprivate var mainResourceMap : ResourceMap! {
            get { try! _default.get_MainResourceMap() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcemanager.resourcenotfound)
        fileprivate lazy var resourceNotFound : Event<TypedEventHandler<ResourceManager?, ResourceNotFoundEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_ResourceNotFound($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_ResourceNotFound($0)
           }
          )
        }()

    }

    public enum ResourceCandidateBridge: AbiBridge {
        public typealias SwiftProjection = ResourceCandidate
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceCandidate
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceCandidate>?) -> ResourceCandidate? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ResourceContextBridge: AbiBridge {
        public typealias SwiftProjection = ResourceContext
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceContext
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceContext>?) -> ResourceContext? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ResourceManagerBridge: AbiBridge {
        public typealias SwiftProjection = ResourceManager
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceManager
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceManager>?) -> ResourceManager? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ResourceMapBridge: AbiBridge {
        public typealias SwiftProjection = ResourceMap
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceMap
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceMap>?) -> ResourceMap? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ResourceNotFoundEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = ResourceNotFoundEventArgs
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceNotFoundEventArgs
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceNotFoundEventArgs>?) -> ResourceNotFoundEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class IResourceContextMaker: MakeFromAbi {
    public typealias SwiftType = AnyIResourceContext
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceContext = try! abi.QueryInterface()
        return __IMPL_Microsoft_Windows_ApplicationModel_Resources.IResourceContextBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IResourceManagerMaker: MakeFromAbi {
    public typealias SwiftType = AnyIResourceManager
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceManager = try! abi.QueryInterface()
        return __IMPL_Microsoft_Windows_ApplicationModel_Resources.IResourceManagerBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class ResourceCandidateMaker: MakeFromAbi {
    public typealias SwiftType = ResourceCandidate
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceCandidate(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ResourceContextMaker: MakeFromAbi {
    public typealias SwiftType = ResourceContext
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceContext(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ResourceManagerMaker: MakeFromAbi {
    public typealias SwiftType = ResourceManager
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceManager(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ResourceMapMaker: MakeFromAbi {
    public typealias SwiftType = ResourceMap
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceMap(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ResourceNotFoundEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = ResourceNotFoundEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ResourceNotFoundEventArgs(fromAbi: abi)
    }
}
