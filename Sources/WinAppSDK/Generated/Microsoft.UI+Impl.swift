// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_UI {
    public enum IClosableNotifierBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CIClosableNotifier
        public typealias SwiftABI = __ABI_Microsoft_UI.IClosableNotifier
        public typealias SwiftProjection = AnyIClosableNotifier
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IClosableNotifierImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI.IClosableNotifierVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IClosableNotifierImpl: IClosableNotifier, WinRTAbiImpl {
        fileprivate typealias Bridge = IClosableNotifierBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.iclosablenotifier.isclosed)
        fileprivate var isClosed : Bool {
            get { try! _default.get_IsClosed() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.iclosablenotifier.closed)
        fileprivate lazy var closed : Event<ClosableNotifierHandler> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_Closed($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_Closed($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.iclosablenotifier.frameworkclosed)
        fileprivate lazy var frameworkClosed : Event<ClosableNotifierHandler> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_FrameworkClosed($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_FrameworkClosed($0)
           }
          )
        }()

    }

    public class ClosableNotifierHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ClosableNotifierHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CIClosableNotifierHandler
        public typealias SwiftABI = __ABI_Microsoft_UI.ClosableNotifierHandler

        public static func from(abi: ComPtr<CABI>?) -> Handler? {
            guard let abi = abi else { return nil }
            let _default = SwiftABI(abi)
            let handler: Handler = { () in
                try _default.Invoke()
            }
            return handler
        }
    }
    public enum ColorsBridge: AbiBridge {
        public typealias SwiftProjection = Colors
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CIColors
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CIColors>?) -> Colors? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension DisplayId: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CDisplayId
    public static func from(abi: ABI) -> Self {
        .init(value: abi.Value)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension IconId: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CIconId
    public static func from(abi: ABI) -> Self {
        .init(value: abi.Value)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension WindowId: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CUI_CWindowId
    public static func from(abi: ABI) -> Self {
        .init(value: abi.Value)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class IClosableNotifierMaker: MakeFromAbi {
    public typealias SwiftType = AnyIClosableNotifier
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_UI.IClosableNotifier = try! abi.QueryInterface()
        return __IMPL_Microsoft_UI.IClosableNotifierBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class ColorsMaker: MakeFromAbi {
    public typealias SwiftType = Colors
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Colors(fromAbi: abi)
    }
}
