// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow: WindowsFoundation.IID {
    .init(Data1: 0xCFA788B3, Data2: 0x643B, Data3: 0x5C5E, Data4: ( 0xAD,0x4E,0x32,0x1D,0x48,0xA8,0x2A,0xCD ))// CFA788B3-643B-5C5E-AD4E-321D48A82ACD
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2: WindowsFoundation.IID {
    .init(Data1: 0x6CD41292, Data2: 0x794C, Data3: 0x5CAC, Data4: ( 0x89,0x61,0x21,0x0D,0x01,0x2C,0x6E,0xBC ))// 6CD41292-794C-5CAC-8961-210D012C6EBC
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3: WindowsFoundation.IID {
    .init(Data1: 0x2F260CEA, Data2: 0x193D, Data3: 0x5DD6, Data4: ( 0xA9,0x04,0xD7,0x64,0x9A,0x60,0x8D,0x2F ))// 2F260CEA-193D-5DD6-A904-D7649A608D2F
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow4: WindowsFoundation.IID {
    .init(Data1: 0x383BFB91, Data2: 0xEA29, Data3: 0x5414, Data4: ( 0x80,0xCD,0x6C,0x76,0xD9,0x81,0xEB,0x31 ))// 383BFB91-EA29-5414-80CD-6C76D981EB31
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2182BC5D, Data2: 0xFDAC, Data3: 0x5C3E, Data4: ( 0xBF,0x37,0x7D,0x8D,0x68,0x4E,0x9D,0x1D ))// 2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xA773AB4C, Data2: 0xA5EC, Data3: 0x50E8, Data4: ( 0x98,0xAC,0x24,0x7F,0xE6,0xCD,0x42,0x27 ))// A773AB4C-A5EC-50E8-98AC-247FE6CD4227
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x0E09D90B, Data2: 0x2261, Data3: 0x590B, Data4: ( 0x9A,0xD1,0x85,0x04,0x99,0x1D,0x87,0x54 ))// 0E09D90B-2261-590B-9AD1-8504991D8754
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter: WindowsFoundation.IID {
    .init(Data1: 0xBC3042C2, Data2: 0xC6C6, Data3: 0x5632, Data4: ( 0x89,0x89,0xFF,0x0E,0xC6,0xD3,0xB4,0x0D ))// BC3042C2-C6C6-5632-8989-FF0EC6D3B40D
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0x62082E3C, Data2: 0x1368, Data3: 0x5238, Data4: ( 0x90,0xD1,0xE9,0x32,0xDC,0x71,0x8A,0x82 ))// 62082E3C-1368-5238-90D1-E932DC718A82
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics: WindowsFoundation.IID {
    .init(Data1: 0x3C315C24, Data2: 0xD540, Data3: 0x5D72, Data4: ( 0xB5,0x18,0xB2,0x26,0xB8,0x36,0x27,0xCB ))// 3C315C24-D540-5D72-B518-B226B83627CB
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics2: WindowsFoundation.IID {
    .init(Data1: 0xCABC23DB, Data2: 0x4606, Data3: 0x5D6E, Data4: ( 0x89,0xA5,0x06,0xDE,0x1D,0x8B,0xD3,0xE2 ))// CABC23DB-4606-5D6E-89A5-06DE1D8BD3E2
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar: WindowsFoundation.IID {
    .init(Data1: 0x5574EFA2, Data2: 0xC91C, Data3: 0x5700, Data4: ( 0xA3,0x63,0x53,0x9C,0x71,0xA7,0xAA,0xF4 ))// 5574EFA2-C91C-5700-A363-539C71A7AAF4
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2: WindowsFoundation.IID {
    .init(Data1: 0x86FAED38, Data2: 0x748A, Data3: 0x5B4B, Data4: ( 0x9C,0xCF,0x3B,0xA0,0x49,0x6C,0x90,0x41 ))// 86FAED38-748A-5B4B-9CCF-3BA0496C9041
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar3: WindowsFoundation.IID {
    .init(Data1: 0x07146E74, Data2: 0x0410, Data3: 0x5597, Data4: ( 0xAB,0xA7,0x1A,0xF2,0x76,0xD2,0xAE,0x07 ))// 07146E74-0410-5597-ABA7-1AF276D2AE07
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x9E1DA52E, Data2: 0x8B15, Data3: 0x54D6, Data4: ( 0xA8,0x86,0xF7,0xB9,0xF9,0xD9,0x30,0xB2 ))// 9E1DA52E-8B15-54D6-A886-F7B9F9D930B2
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea: WindowsFoundation.IID {
    .init(Data1: 0x5C7E0537, Data2: 0xB621, Data3: 0x5579, Data4: ( 0xBC,0xAE,0xA8,0x4A,0xA8,0x74,0x61,0x67 ))// 5C7E0537-B621-5579-BCAE-A84AA8746167
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics: WindowsFoundation.IID {
    .init(Data1: 0x02AB4926, Data2: 0x211E, Data3: 0x5D49, Data4: ( 0x8E,0x4B,0x2A,0xF1,0x93,0xDA,0xED,0x09 ))// 02AB4926-211E-5D49-8E4B-2AF193DAED09
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics2: WindowsFoundation.IID {
    .init(Data1: 0x7207AD4B, Data2: 0x890D, Data3: 0x5DD7, Data4: ( 0xBC,0x18,0x78,0xFF,0xD9,0x54,0x4D,0x8F ))// 7207AD4B-890D-5DD7-BC18-78FFD9544D8F
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher: WindowsFoundation.IID {
    .init(Data1: 0x83F6562F, Data2: 0xD3A0, Data3: 0x548B, Data4: ( 0x8E,0x4F,0xA9,0x9B,0xE3,0xD9,0x5C,0x9C ))// 83F6562F-D3A0-548B-8E4F-A99BE3D95C9C
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter: WindowsFoundation.IID {
    .init(Data1: 0xFA9141FD, Data2: 0xB8DD, Data3: 0x5DA1, Data4: ( 0x8B,0x2B,0x7C,0xDA,0xDB,0x76,0xF5,0x93 ))// FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0x2EC0D2C1, Data2: 0xE086, Data3: 0x55BB, Data4: ( 0xA3,0xB2,0x44,0x94,0x2E,0x23,0x1C,0x67 ))// 2EC0D2C1-E086-55BB-A3B2-44942E231C67
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter: WindowsFoundation.IID {
    .init(Data1: 0x21693970, Data2: 0x4F4C, Data3: 0x5172, Data4: ( 0x9E,0x9D,0x68,0x2A,0x2D,0x17,0x48,0x84 ))// 21693970-4F4C-5172-9E9D-682A2D174884
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2: WindowsFoundation.IID {
    .init(Data1: 0x5C6CCD93, Data2: 0x4244, Data3: 0x5CD2, Data4: ( 0xB3,0x55,0xED,0x5E,0xA3,0x4D,0xF7,0x30 ))// 5C6CCD93-4244-5CD2-B355-ED5EA34DF730
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3: WindowsFoundation.IID {
    .init(Data1: 0x55D26138, Data2: 0x4C38, Data3: 0x57E7, Data4: ( 0xA0,0xC1,0xD4,0x67,0xB7,0x74,0xDB,0x8C ))// 55D26138-4C38-57E7-A0C1-D467B774DB8C
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0x997225E4, Data2: 0x7B00, Data3: 0x5AEE, Data4: ( 0xA4,0xBE,0xD4,0x06,0x8D,0x19,0x99,0xE2 ))// 997225E4-7B00-5AEE-A4BE-D4068D1999E2
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics2: WindowsFoundation.IID {
    .init(Data1: 0xED5C4F92, Data2: 0x32F4, Data3: 0x5D15, Data4: ( 0x80,0xD0,0xB2,0xA5,0xEF,0xA0,0x4D,0x39 ))// ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39
}

@_spi(WinRTInternal)
public enum __ABI_Microsoft_UI_Windowing {
    public class IAppWindow: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow }

        public func get_Id() throws -> WinAppSDK.WindowId {
            var value: __x_ABI_CMicrosoft_CUI_CWindowId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_IsShownInSwitchers() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsShownInSwitchers(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsShownInSwitchers(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsShownInSwitchers(pThis, .init(from: value)))
            }
        }

        public func get_IsVisible() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVisible(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_OwnerWindowId() throws -> WinAppSDK.WindowId {
            var value: __x_ABI_CMicrosoft_CUI_CWindowId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OwnerWindowId(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_Position() throws -> UWP.PointInt32 {
            var value: __x_ABI_CWindows_CGraphics_CPointInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_Presenter() throws -> WinAppSDK.AppWindowPresenter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Presenter(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowPresenterBridge.from(abi: value)
        }

        public func get_Size() throws -> UWP.SizeInt32 {
            var value: __x_ABI_CWindows_CGraphics_CSizeInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_Title() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Title(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        public func get_TitleBar() throws -> WinAppSDK.AppWindowTitleBar? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleBar(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowTitleBarBridge.from(abi: value)
        }

        public func Destroy() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Destroy(pThis))
            }
        }

        public func Hide() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis))
            }
        }

        public func Move(_ position: UWP.PointInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, .from(swift: position)))
            }
        }

        public func MoveAndResize(_ rect: UWP.RectInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveAndResize(pThis, .from(swift: rect)))
            }
        }

        public func MoveAndResizeRelativeToDisplayArea(_ rect: UWP.RectInt32, _ displayarea: WinAppSDK.DisplayArea?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveAndResizeRelativeToDisplayArea(pThis, .from(swift: rect), RawPointer(displayarea)))
            }
        }

        public func Resize(_ size: UWP.SizeInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Resize(pThis, .from(swift: size)))
            }
        }

        public func SetIcon(_ iconPath: String) throws {
            let _iconPath = try! HString(iconPath)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIcon(pThis, _iconPath.get()))
            }
        }

        public func SetIconWithIconId(_ iconId: WinAppSDK.IconId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIconWithIconId(pThis, .from(swift: iconId)))
            }
        }

        public func SetPresenter(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresenter(pThis, RawPointer(appWindowPresenter)))
            }
        }

        public func SetPresenterByKind(_ appWindowPresenterKind: WinAppSDK.AppWindowPresenterKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresenterByKind(pThis, appWindowPresenterKind))
            }
        }

        public func Show() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Show(pThis))
            }
        }

        public func ShowWithActivation(_ activateWindow: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowWithActivation(pThis, .init(from: activateWindow)))
            }
        }

        public func add_Changed(_ handler: TypedEventHandler<WinAppSDK.AppWindow?, WinAppSDK.AppWindowChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindow___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindowChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Changed(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Changed(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Changed(pThis, token))
            }
        }

        public func add_Closing(_ handler: TypedEventHandler<WinAppSDK.AppWindow?, WinAppSDK.AppWindowClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindow___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindowClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Closing(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        public func add_Destroying(_ handler: TypedEventHandler<WinAppSDK.AppWindow?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindow_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Destroying(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Destroying(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Destroying(pThis, token))
            }
        }

    }

    public class IAppWindow2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2 }

        public func get_ClientSize() throws -> UWP.SizeInt32 {
            var value: __x_ABI_CWindows_CGraphics_CSizeInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClientSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func MoveInZOrderAtBottom() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveInZOrderAtBottom(pThis))
            }
        }

        public func MoveInZOrderAtTop() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveInZOrderAtTop(pThis))
            }
        }

        public func MoveInZOrderBelow(_ windowId: WinAppSDK.WindowId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveInZOrderBelow(pThis, .from(swift: windowId)))
            }
        }

        public func ResizeClient(_ size: UWP.SizeInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeClient(pThis, .from(swift: size)))
            }
        }

        public func ShowOnceWithRequestedStartupState() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowOnceWithRequestedStartupState(pThis))
            }
        }

    }

    public class IAppWindow3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3 }

        public func AssociateWithDispatcherQueue(_ dispatcherQueue: WinAppSDK.DispatcherQueue?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AssociateWithDispatcherQueue(pThis, RawPointer(dispatcherQueue)))
            }
        }

        public func get_DispatcherQueue() throws -> WinAppSDK.DispatcherQueue? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_UI_Dispatching.DispatcherQueueBridge.from(abi: value)
        }

    }

    public class IAppWindow4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow4 }

        public func SetTaskbarIcon(_ iconPath: String) throws {
            let _iconPath = try! HString(iconPath)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTaskbarIcon(pThis, _iconPath.get()))
            }
        }

        public func SetTaskbarIconWithIconId(_ iconId: WinAppSDK.IconId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTaskbarIconWithIconId(pThis, .from(swift: iconId)))
            }
        }

        public func SetTitleBarIcon(_ iconPath: String) throws {
            let _iconPath = try! HString(iconPath)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTitleBarIcon(pThis, _iconPath.get()))
            }
        }

        public func SetTitleBarIconWithIconId(_ iconId: WinAppSDK.IconId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTitleBarIconWithIconId(pThis, .from(swift: iconId)))
            }
        }

    }

    public class IAppWindowChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs }

        public func get_DidPositionChange() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidPositionChange(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DidPresenterChange() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidPresenterChange(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DidSizeChange() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidSizeChange(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DidVisibilityChange() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidVisibilityChange(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IAppWindowChangedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2 }

        public func get_DidZOrderChange() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidZOrderChange(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_IsZOrderAtBottom() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZOrderAtBottom(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_IsZOrderAtTop() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZOrderAtTop(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_ZOrderBelowWindowId() throws -> WinAppSDK.WindowId {
            var value: __x_ABI_CMicrosoft_CUI_CWindowId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZOrderBelowWindowId(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IAppWindowClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs }

        public func get_Cancel() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Cancel(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class IAppWindowPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter }

        public func get_Kind() throws -> WinAppSDK.AppWindowPresenterKind {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

    }

    public class IAppWindowPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenterFactory }

    }

    public class IAppWindowStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics }

        public func Create() throws -> WinAppSDK.AppWindow? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowBridge.from(abi: result)
        }

        public func CreateWithPresenter(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?) throws -> WinAppSDK.AppWindow? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithPresenter(pThis, RawPointer(appWindowPresenter), &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowBridge.from(abi: result)
        }

        public func CreateWithPresenterAndOwner(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?, _ ownerWindowId: WinAppSDK.WindowId) throws -> WinAppSDK.AppWindow? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithPresenterAndOwner(pThis, RawPointer(appWindowPresenter), .from(swift: ownerWindowId), &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowBridge.from(abi: result)
        }

        public func GetFromWindowId(_ windowId: WinAppSDK.WindowId) throws -> WinAppSDK.AppWindow? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromWindowId(pThis, .from(swift: windowId), &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowBridge.from(abi: result)
        }

    }

    public class IAppWindowStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics2 }

        public func CreateWithDispatcherQueue(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?, _ ownerWindowId: WinAppSDK.WindowId, _ DispatcherQueue: WinAppSDK.DispatcherQueue?) throws -> WinAppSDK.AppWindow? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithDispatcherQueue(pThis, RawPointer(appWindowPresenter), .from(swift: ownerWindowId), RawPointer(DispatcherQueue), &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.AppWindowBridge.from(abi: result)
        }

    }

    public class IAppWindowTitleBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar }

        public func get_BackgroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_BackgroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundColor(pThis, _value))
            }
        }

        public func get_ButtonBackgroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonBackgroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonBackgroundColor(pThis, _value))
            }
        }

        public func get_ButtonForegroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonForegroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonForegroundColor(pThis, _value))
            }
        }

        public func get_ButtonHoverBackgroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonHoverBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonHoverBackgroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonHoverBackgroundColor(pThis, _value))
            }
        }

        public func get_ButtonHoverForegroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonHoverForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonHoverForegroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonHoverForegroundColor(pThis, _value))
            }
        }

        public func get_ButtonInactiveBackgroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonInactiveBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonInactiveBackgroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonInactiveBackgroundColor(pThis, _value))
            }
        }

        public func get_ButtonInactiveForegroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonInactiveForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonInactiveForegroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonInactiveForegroundColor(pThis, _value))
            }
        }

        public func get_ButtonPressedBackgroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonPressedBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonPressedBackgroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonPressedBackgroundColor(pThis, _value))
            }
        }

        public func get_ButtonPressedForegroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonPressedForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ButtonPressedForegroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonPressedForegroundColor(pThis, _value))
            }
        }

        public func get_ExtendsContentIntoTitleBar() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendsContentIntoTitleBar(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ExtendsContentIntoTitleBar(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendsContentIntoTitleBar(pThis, .init(from: value)))
            }
        }

        public func get_ForegroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_ForegroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForegroundColor(pThis, _value))
            }
        }

        public func get_Height() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        public func get_IconShowOptions() throws -> WinAppSDK.IconShowOptions {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconShowOptions(pThis, &value))
            }
            return value
        }

        public func put_IconShowOptions(_ value: WinAppSDK.IconShowOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconShowOptions(pThis, value))
            }
        }

        public func get_InactiveBackgroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InactiveBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_InactiveBackgroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InactiveBackgroundColor(pThis, _value))
            }
        }

        public func get_InactiveForegroundColor() throws -> UWP.Color? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InactiveForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        public func put_InactiveForegroundColor(_ value: UWP.Color?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InactiveForegroundColor(pThis, _value))
            }
        }

        public func get_LeftInset() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftInset(pThis, &value))
            }
            return value
        }

        public func get_RightInset() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RightInset(pThis, &value))
            }
            return value
        }

        public func ResetToDefault() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResetToDefault(pThis))
            }
        }

        public func SetDragRectangles(_ value: [UWP.RectInt32]) throws {
            try value.toABI { _value in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetDragRectangles(pThis, _value.count, _value.start))
                }
            }
        }

    }

    public class IAppWindowTitleBar2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2 }

        public func get_PreferredHeightOption() throws -> WinAppSDK.TitleBarHeightOption {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredHeightOption(pThis, &value))
            }
            return value
        }

        public func put_PreferredHeightOption(_ value: WinAppSDK.TitleBarHeightOption) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredHeightOption(pThis, value))
            }
        }

    }

    public class IAppWindowTitleBar3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar3 }

        public func get_PreferredTheme() throws -> WinAppSDK.TitleBarTheme {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarTheme = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredTheme(pThis, &value))
            }
            return value
        }

        public func put_PreferredTheme(_ value: WinAppSDK.TitleBarTheme) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredTheme(pThis, value))
            }
        }

    }

    public class IAppWindowTitleBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBarStatics }

        public func IsCustomizationSupported() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBarStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsCustomizationSupported(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IDisplayArea: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea }

        public func get_DisplayId() throws -> WinAppSDK.DisplayId {
            var value: __x_ABI_CMicrosoft_CUI_CDisplayId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayId(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_IsPrimary() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimary(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_OuterBounds() throws -> UWP.RectInt32 {
            var value: __x_ABI_CWindows_CGraphics_CRectInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OuterBounds(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_WorkArea() throws -> UWP.RectInt32 {
            var value: __x_ABI_CWindows_CGraphics_CRectInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WorkArea(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IDisplayAreaStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics }

        public func get_Primary() throws -> WinAppSDK.DisplayArea? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Primary(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.DisplayAreaBridge.from(abi: value)
        }

        public func CreateWatcher() throws -> WinAppSDK.DisplayAreaWatcher? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcher(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.DisplayAreaWatcherBridge.from(abi: result)
        }

        public func FindAll() throws -> WindowsFoundation.AnyIVectorView<WinAppSDK.DisplayArea?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAll(pThis, &resultAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper.unwrapFrom(abi: result)
        }

        public func GetFromWindowId(_ windowId: WinAppSDK.WindowId, _ displayAreaFallback: WinAppSDK.DisplayAreaFallback) throws -> WinAppSDK.DisplayArea? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromWindowId(pThis, .from(swift: windowId), displayAreaFallback, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.DisplayAreaBridge.from(abi: result)
        }

        public func GetFromPoint(_ point: UWP.PointInt32, _ displayAreaFallback: WinAppSDK.DisplayAreaFallback) throws -> WinAppSDK.DisplayArea? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromPoint(pThis, .from(swift: point), displayAreaFallback, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.DisplayAreaBridge.from(abi: result)
        }

        public func GetFromRect(_ rect: UWP.RectInt32, _ displayAreaFallback: WinAppSDK.DisplayAreaFallback) throws -> WinAppSDK.DisplayArea? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromRect(pThis, .from(swift: rect), displayAreaFallback, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.DisplayAreaBridge.from(abi: result)
        }

    }

    public class IDisplayAreaStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics2 }

        public func GetFromDisplayId(_ displayId: WinAppSDK.DisplayId) throws -> WinAppSDK.DisplayArea? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromDisplayId(pThis, .from(swift: displayId), &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.DisplayAreaBridge.from(abi: result)
        }

    }

    public class IDisplayAreaWatcher: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher }

        public func get_Status() throws -> WinAppSDK.DisplayAreaWatcherStatus {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        public func Start() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        public func Stop() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        public func add_Added(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, WinAppSDK.DisplayArea?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Added(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
            }
        }

        public func add_EnumerationCompleted(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, _handler, &token))
            }
            return token
        }

        public func remove_EnumerationCompleted(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
            }
        }

        public func add_Removed(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, WinAppSDK.DisplayArea?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Removed(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
            }
        }

        public func add_Stopped(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Stopped(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
            }
        }

        public func add_Updated(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, WinAppSDK.DisplayArea?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        public func remove_Updated(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

    }

    public class IFullScreenPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter }

    }

    public class IFullScreenPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenterStatics }

        public func Create() throws -> WinAppSDK.FullScreenPresenter? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.FullScreenPresenterBridge.from(abi: result)
        }

    }

    public class IOverlappedPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter }

        public func get_HasBorder() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasBorder(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_HasTitleBar() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasTitleBar(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_IsAlwaysOnTop() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAlwaysOnTop(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsAlwaysOnTop(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsAlwaysOnTop(pThis, .init(from: value)))
            }
        }

        public func get_IsMaximizable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMaximizable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsMaximizable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMaximizable(pThis, .init(from: value)))
            }
        }

        public func get_IsMinimizable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMinimizable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsMinimizable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMinimizable(pThis, .init(from: value)))
            }
        }

        public func get_IsModal() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsModal(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsModal(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsModal(pThis, .init(from: value)))
            }
        }

        public func get_IsResizable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsResizable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsResizable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsResizable(pThis, .init(from: value)))
            }
        }

        public func get_State() throws -> WinAppSDK.OverlappedPresenterState {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        public func Maximize() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Maximize(pThis))
            }
        }

        public func Minimize() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Minimize(pThis))
            }
        }

        public func Restore() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Restore(pThis))
            }
        }

        public func SetBorderAndTitleBar(_ hasBorder: Bool, _ hasTitleBar: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBorderAndTitleBar(pThis, .init(from: hasBorder), .init(from: hasTitleBar)))
            }
        }

    }

    public class IOverlappedPresenter2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2 }

        public func MinimizeWithActivation(_ activateWindow: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MinimizeWithActivation(pThis, .init(from: activateWindow)))
            }
        }

        public func RestoreWithActivation(_ activateWindow: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RestoreWithActivation(pThis, .init(from: activateWindow)))
            }
        }

    }

    public class IOverlappedPresenter3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3 }

        public func get_PreferredMinimumHeight() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredMinimumHeight(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        public func put_PreferredMinimumHeight(_ value: Int32?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredMinimumHeight(pThis, _value))
            }
        }

        public func get_PreferredMinimumWidth() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredMinimumWidth(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        public func put_PreferredMinimumWidth(_ value: Int32?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredMinimumWidth(pThis, _value))
            }
        }

        public func get_PreferredMaximumWidth() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredMaximumWidth(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        public func put_PreferredMaximumWidth(_ value: Int32?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredMaximumWidth(pThis, _value))
            }
        }

        public func get_PreferredMaximumHeight() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredMaximumHeight(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        public func put_PreferredMaximumHeight(_ value: Int32?) throws {
            let valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredMaximumHeight(pThis, _value))
            }
        }

    }

    public class IOverlappedPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics }

        public func Create() throws -> WinAppSDK.OverlappedPresenter? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.OverlappedPresenterBridge.from(abi: result)
        }

        public func CreateForContextMenu() throws -> WinAppSDK.OverlappedPresenter? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForContextMenu(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.OverlappedPresenterBridge.from(abi: result)
        }

        public func CreateForDialog() throws -> WinAppSDK.OverlappedPresenter? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForDialog(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.OverlappedPresenterBridge.from(abi: result)
        }

        public func CreateForToolWindow() throws -> WinAppSDK.OverlappedPresenter? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForToolWindow(pThis, &resultAbi))
                }
            }
            return __IMPL_Microsoft_UI_Windowing.OverlappedPresenterBridge.from(abi: result)
        }

    }

    public class IOverlappedPresenterStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics2 }

        public func get_RequestedStartupState() throws -> WinAppSDK.OverlappedPresenterState {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedStartupState(pThis, &value))
            }
            return value
        }

    }

}
