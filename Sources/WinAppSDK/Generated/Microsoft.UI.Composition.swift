// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontrollerprogressbehavior)
public typealias AnimationControllerProgressBehavior = __x_ABI_CMicrosoft_CUI_CComposition_CAnimationControllerProgressBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationdelaybehavior)
public typealias AnimationDelayBehavior = __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDelayBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationdirection)
public typealias AnimationDirection = __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationiterationbehavior)
public typealias AnimationIterationBehavior = __x_ABI_CMicrosoft_CUI_CComposition_CAnimationIterationBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationpropertyaccessmode)
public typealias AnimationPropertyAccessMode = __x_ABI_CMicrosoft_CUI_CComposition_CAnimationPropertyAccessMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationstopbehavior)
public typealias AnimationStopBehavior = __x_ABI_CMicrosoft_CUI_CComposition_CAnimationStopBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbackfacevisibility)
public typealias CompositionBackfaceVisibility = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBackfaceVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbatchtypes)
public typealias CompositionBatchTypes = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBatchTypes
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbitmapinterpolationmode)
public typealias CompositionBitmapInterpolationMode = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbordermode)
public typealias CompositionBorderMode = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBorderMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorspace)
public typealias CompositionColorSpace = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionColorSpace
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncompositemode)
public typealias CompositionCompositeMode = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionCompositeMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondropshadowsourcepolicy)
public typealias CompositionDropShadowSourcePolicy = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionDropShadowSourcePolicy
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunctionmode)
public typealias CompositionEasingFunctionMode = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEasingFunctionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectfactoryloadstatus)
public typealias CompositionEffectFactoryLoadStatus = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEffectFactoryLoadStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongetvaluestatus)
public typealias CompositionGetValueStatus = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGetValueStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientextendmode)
public typealias CompositionGradientExtendMode = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGradientExtendMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmappingmode)
public typealias CompositionMappingMode = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionMappingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstretch)
public typealias CompositionStretch = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokecap)
public typealias CompositionStrokeCap = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeCap
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokelinejoin)
public typealias CompositionStrokeLineJoin = __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeLineJoin
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ambientlight)
public final class AmbientLight : WinAppSDK.CompositionLight {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IAmbientLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIAmbientLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ambientlight.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    private lazy var _IAmbientLight2: __ABI_Microsoft_UI_Composition.IAmbientLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ambientlight.intensity)
    public var intensity : Float {
        get { try! _IAmbientLight2.get_Intensity() }
        set { try! _IAmbientLight2.put_Intensity(newValue) }
    }

    deinit {
        _default = nil
        _IAmbientLight2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller)
public final class AnimationController : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IAnimationController
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIAnimationController
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IAnimationControllerStatics: __ABI_Microsoft_UI_Composition.IAnimationControllerStatics = try! RoGetActivationFactory("Microsoft.UI.Composition.AnimationController")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.maxplaybackrate)
    public static var maxPlaybackRate : Float {
        get { try! _IAnimationControllerStatics.get_MaxPlaybackRate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.minplaybackrate)
    public static var minPlaybackRate : Float {
        get { try! _IAnimationControllerStatics.get_MinPlaybackRate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.pause)
    public func pause() throws {
        try _default.Pause()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.resume)
    public func resume() throws {
        try _default.Resume()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.playbackrate)
    public var playbackRate : Float {
        get { try! _default.get_PlaybackRate() }
        set { try! _default.put_PlaybackRate(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.progress)
    public var progress : Float {
        get { try! _default.get_Progress() }
        set { try! _default.put_Progress(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationcontroller.progressbehavior)
    public var progressBehavior : AnimationControllerProgressBehavior {
        get { try! _default.get_ProgressBehavior() }
        set { try! _default.put_ProgressBehavior(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationpropertyinfo)
public final class AnimationPropertyInfo : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IAnimationPropertyInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationpropertyinfo.accessmode)
    public var accessMode : AnimationPropertyAccessMode {
        get { try! _default.get_AccessMode() }
        set { try! _default.put_AccessMode(newValue) }
    }

    private lazy var _IAnimationPropertyInfo2: __ABI_Microsoft_UI_Composition.IAnimationPropertyInfo2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationpropertyinfo.getresolvedcompositionobject)
    public func getResolvedCompositionObject() throws -> CompositionObject! {
        try _IAnimationPropertyInfo2.GetResolvedCompositionObject()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.animationpropertyinfo.getresolvedcompositionobjectproperty)
    public func getResolvedCompositionObjectProperty() throws -> String {
        try _IAnimationPropertyInfo2.GetResolvedCompositionObjectProperty()
    }

    deinit {
        _default = nil
        _IAnimationPropertyInfo2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.backeasingfunction)
public final class BackEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IBackEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIBackEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.backeasingfunction.amplitude)
    public var amplitude : Float {
        get { try! _default.get_Amplitude() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.backeasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.booleankeyframeanimation)
public final class BooleanKeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IBooleanKeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIBooleanKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.booleankeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: Bool) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bounceeasingfunction)
public final class BounceEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IBounceEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIBounceEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bounceeasingfunction.bounces)
    public var bounces : Int32 {
        get { try! _default.get_Bounces() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bounceeasingfunction.bounciness)
    public var bounciness : Float {
        get { try! _default.get_Bounciness() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bounceeasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncescalarnaturalmotionanimation)
public final class BounceScalarNaturalMotionAnimation : WinAppSDK.ScalarNaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IBounceScalarNaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIBounceScalarNaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncescalarnaturalmotionanimation.acceleration)
    public var acceleration : Float {
        get { try! _default.get_Acceleration() }
        set { try! _default.put_Acceleration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncescalarnaturalmotionanimation.restitution)
    public var restitution : Float {
        get { try! _default.get_Restitution() }
        set { try! _default.put_Restitution(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncevector2naturalmotionanimation)
public final class BounceVector2NaturalMotionAnimation : WinAppSDK.Vector2NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IBounceVector2NaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIBounceVector2NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncevector2naturalmotionanimation.acceleration)
    public var acceleration : Float {
        get { try! _default.get_Acceleration() }
        set { try! _default.put_Acceleration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncevector2naturalmotionanimation.restitution)
    public var restitution : Float {
        get { try! _default.get_Restitution() }
        set { try! _default.put_Restitution(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncevector3naturalmotionanimation)
public final class BounceVector3NaturalMotionAnimation : WinAppSDK.Vector3NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IBounceVector3NaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIBounceVector3NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncevector3naturalmotionanimation.acceleration)
    public var acceleration : Float {
        get { try! _default.get_Acceleration() }
        set { try! _default.put_Acceleration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.bouncevector3naturalmotionanimation.restitution)
    public var restitution : Float {
        get { try! _default.get_Restitution() }
        set { try! _default.put_Restitution(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.circleeasingfunction)
public final class CircleEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICircleEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICircleEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.circleeasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.colorkeyframeanimation)
public final class ColorKeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IColorKeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIColorKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.colorkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: UWP.Color) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.colorkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: UWP.Color, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.colorkeyframeanimation.interpolationcolorspace)
    public var interpolationColorSpace : CompositionColorSpace {
        get { try! _default.get_InterpolationColorSpace() }
        set { try! _default.put_InterpolationColorSpace(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation)
open class CompositionAnimation : WinAppSDK.CompositionObject, ICompositionAnimationBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionAnimationFactory : __ABI_Microsoft_UI_Composition.ICompositionAnimationFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionAnimation")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.clearallparameters)
    public func clearAllParameters() throws {
        try _default.ClearAllParameters()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.clearparameter)
    public func clearParameter(_ key: String) throws {
        try _default.ClearParameter(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setcolorparameter)
    public func setColorParameter(_ key: String, _ value: UWP.Color) throws {
        try _default.SetColorParameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setmatrix3x2parameter)
    public func setMatrix3x2Parameter(_ key: String, _ value: WindowsFoundation.Matrix3x2) throws {
        try _default.SetMatrix3x2Parameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setmatrix4x4parameter)
    public func setMatrix4x4Parameter(_ key: String, _ value: WindowsFoundation.Matrix4x4) throws {
        try _default.SetMatrix4x4Parameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setquaternionparameter)
    public func setQuaternionParameter(_ key: String, _ value: WindowsFoundation.Quaternion) throws {
        try _default.SetQuaternionParameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setreferenceparameter)
    public func setReferenceParameter(_ key: String, _ compositionObject: CompositionObject!) throws {
        try _default.SetReferenceParameter(key, compositionObject)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setscalarparameter)
    public func setScalarParameter(_ key: String, _ value: Float) throws {
        try _default.SetScalarParameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setvector2parameter)
    public func setVector2Parameter(_ key: String, _ value: WindowsFoundation.Vector2) throws {
        try _default.SetVector2Parameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setvector3parameter)
    public func setVector3Parameter(_ key: String, _ value: WindowsFoundation.Vector3) throws {
        try _default.SetVector3Parameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setvector4parameter)
    public func setVector4Parameter(_ key: String, _ value: WindowsFoundation.Vector4) throws {
        try _default.SetVector4Parameter(key, value)
    }

    private lazy var _ICompositionAnimation2: __ABI_Microsoft_UI_Composition.ICompositionAnimation2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setbooleanparameter)
    public func setBooleanParameter(_ key: String, _ value: Bool) throws {
        try _ICompositionAnimation2.SetBooleanParameter(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.target)
    public var target : String {
        get { try! _ICompositionAnimation2.get_Target() }
        set { try! _ICompositionAnimation2.put_Target(newValue) }
    }

    private lazy var _ICompositionAnimation3: __ABI_Microsoft_UI_Composition.ICompositionAnimation3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.initialvalueexpressions)
    public var initialValueExpressions : InitialValueExpressionCollection! {
        get { try! _ICompositionAnimation3.get_InitialValueExpressions() }
    }

    private lazy var _ICompositionAnimation4: __ABI_Microsoft_UI_Composition.ICompositionAnimation4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimation.setexpressionreferenceparameter)
    public func setExpressionReferenceParameter(_ parameterName: String, _ source: AnyIAnimationObject!) throws {
        try _ICompositionAnimation4.SetExpressionReferenceParameter(parameterName, source)
    }

    private lazy var _ICompositionAnimationBase: __ABI_Microsoft_UI_Composition.ICompositionAnimationBase! = getInterfaceForCaching()
    deinit {
        _default = nil
        _ICompositionAnimation2 = nil
        _ICompositionAnimation3 = nil
        _ICompositionAnimation4 = nil
        _ICompositionAnimationBase = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimationgroup)
public final class CompositionAnimationGroup : WinAppSDK.CompositionObject, IIterable, ICompositionAnimationBase {
    public typealias T = CompositionAnimation?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionAnimationGroup
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionAnimationGroup
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimationgroup.add)
    public func add(_ value: CompositionAnimation!) throws {
        try _default.Add(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimationgroup.remove)
    public func remove(_ value: CompositionAnimation!) throws {
        try _default.Remove(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimationgroup.removeall)
    public func removeAll() throws {
        try _default.RemoveAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimationgroup.count)
    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    private lazy var _IIterable: IIterableCompositionAnimation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionanimationgroup.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionAnimation?>? {
        try! _IIterable.First()
    }

    private lazy var _ICompositionAnimationBase: __ABI_Microsoft_UI_Composition.ICompositionAnimationBase! = getInterfaceForCaching()
    deinit {
        _default = nil
        _IIterable = nil
        _ICompositionAnimationBase = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionapiinformation)
public final class CompositionApiInformation {
    private static let _ICompositionApiInformationStatics: __ABI_Microsoft_UI_Composition.ICompositionApiInformationStatics = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionApiInformation")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionapiinformation.apiversion)
    public static var apiVersion : UInt64 {
        get { try! _ICompositionApiInformationStatics.get_ApiVersion() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbackdropbrush)
public final class CompositionBackdropBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionBackdropBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionBackdropBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbatchcompletedeventargs)
public final class CompositionBatchCompletedEventArgs : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionBatchCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionBatchCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionbrush)
open class CompositionBrush : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionBrushFactory : __ABI_Microsoft_UI_Composition.ICompositionBrushFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionBrush")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncapabilities)
public final class CompositionCapabilities : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionCapabilities
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionCapabilities
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionCapabilities")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncapabilities.areeffectssupported)
    public func areEffectsSupported() throws -> Bool {
        try _default.AreEffectsSupported()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncapabilities.areeffectsfast)
    public func areEffectsFast() throws -> Bool {
        try _default.AreEffectsFast()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncapabilities.changed)
    public lazy var changed : Event<TypedEventHandler<CompositionCapabilities?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Changed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Changed($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip)
open class CompositionClip : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionClip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionClipFactory : __ABI_Microsoft_UI_Composition.ICompositionClipFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionClip")

    private lazy var _ICompositionClip2: __ABI_Microsoft_UI_Composition.ICompositionClip2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_AnchorPoint() }
        set { try! _ICompositionClip2.put_AnchorPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_CenterPoint() }
        set { try! _ICompositionClip2.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_Offset() }
        set { try! _ICompositionClip2.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.rotationangle)
    public var rotationAngle : Float {
        get { try! _ICompositionClip2.get_RotationAngle() }
        set { try! _ICompositionClip2.put_RotationAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _ICompositionClip2.get_RotationAngleInDegrees() }
        set { try! _ICompositionClip2.put_RotationAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _ICompositionClip2.get_Scale() }
        set { try! _ICompositionClip2.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionclip.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _ICompositionClip2.get_TransformMatrix() }
        set { try! _ICompositionClip2.put_TransformMatrix(newValue) }
    }

    deinit {
        _default = nil
        _ICompositionClip2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorbrush)
public final class CompositionColorBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionColorBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionColorBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorbrush.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstop)
public final class CompositionColorGradientStop : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionColorGradientStop
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionColorGradientStop
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstop.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstop.offset)
    public var offset : Float {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection)
public final class CompositionColorGradientStopCollection : WinRTClass, IIterable, IVector {
    public typealias T = CompositionColorGradientStop?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionColorGradientStopCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionColorGradientStopCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IIterable: IIterableCompositionColorGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionColorGradientStop?>? {
        try! _IIterable.First()
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    private lazy var _IVector: IVectorCompositionColorGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.getat)
    public func getAt(_ index: UInt32) -> CompositionColorGradientStop? {
        try! _IVector.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<CompositionColorGradientStop?>? {
        try! _IVector.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.indexof)
    public func indexOf(_ value: CompositionColorGradientStop?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.setat)
    public func setAt(_ index: UInt32, _ value: CompositionColorGradientStop?) {
        try! _IVector.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: CompositionColorGradientStop?) {
        try! _IVector.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.append)
    public func append(_ value: CompositionColorGradientStop?) {
        try! _IVector.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.clear)
    public func clear() {
        try! _IVector.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [CompositionColorGradientStop?]) -> UInt32 {
        try! _IVector.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.replaceall)
    public func replaceAll(_ items: [CompositionColorGradientStop?]) {
        try! _IVector.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncolorgradientstopcollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_Size() }
    }

    deinit {
        _default = nil
        _IIterable = nil
        _IVector = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncommitbatch)
public final class CompositionCommitBatch : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionCommitBatch
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionCommitBatch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncommitbatch.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActive() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncommitbatch.isended)
    public var isEnded : Bool {
        get { try! _default.get_IsEnded() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncommitbatch.completed)
    public lazy var completed : Event<TypedEventHandler<Any?, CompositionBatchCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Completed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Completed($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncontainershape)
public final class CompositionContainerShape : WinAppSDK.CompositionShape {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionContainerShape
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionContainerShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioncontainershape.shapes)
    public var shapes : CompositionShapeCollection! {
        get { try! _default.get_Shapes() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface)
open class CompositionDrawingSurface : WinAppSDK.CompositionObject, ICompositionSurface {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionDrawingSurface
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionDrawingSurface
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionDrawingSurfaceFactory : __ABI_Microsoft_UI_Composition.ICompositionDrawingSurfaceFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionDrawingSurface")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.alphamode)
    public var alphaMode : WinAppSDK.DirectXAlphaMode {
        get { try! _default.get_AlphaMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.pixelformat)
    public var pixelFormat : WinAppSDK.DirectXPixelFormat {
        get { try! _default.get_PixelFormat() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    private lazy var _ICompositionDrawingSurface2: __ABI_Microsoft_UI_Composition.ICompositionDrawingSurface2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.resize)
    public func resize(_ sizePixels: UWP.SizeInt32) throws {
        try _ICompositionDrawingSurface2.Resize(sizePixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.scroll)
    public func scroll(_ offset: UWP.PointInt32) throws {
        try _ICompositionDrawingSurface2.Scroll(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.scroll)
    public func scroll(_ offset: UWP.PointInt32, _ scrollRect: UWP.RectInt32) throws {
        try _ICompositionDrawingSurface2.ScrollRect(offset, scrollRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.scrollwithclip)
    public func scrollWithClip(_ offset: UWP.PointInt32, _ clipRect: UWP.RectInt32) throws {
        try _ICompositionDrawingSurface2.ScrollWithClip(offset, clipRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.scrollwithclip)
    public func scrollWithClip(_ offset: UWP.PointInt32, _ clipRect: UWP.RectInt32, _ scrollRect: UWP.RectInt32) throws {
        try _ICompositionDrawingSurface2.ScrollRectWithClip(offset, clipRect, scrollRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiondrawingsurface.sizeint32)
    public var sizeInt32 : UWP.SizeInt32 {
        get { try! _ICompositionDrawingSurface2.get_SizeInt32() }
    }

    private lazy var _ICompositionSurface: __ABI_Microsoft_UI_Composition.ICompositionSurface! = getInterfaceForCaching()
    deinit {
        _default = nil
        _ICompositionDrawingSurface2 = nil
        _ICompositionSurface = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction)
open class CompositionEasingFunction : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionEasingFunctionFactory : __ABI_Microsoft_UI_Composition.ICompositionEasingFunctionFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionEasingFunction")

    private static let _ICompositionEasingFunctionStatics: __ABI_Microsoft_UI_Composition.ICompositionEasingFunctionStatics = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionEasingFunction")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createcubicbeziereasingfunction)
    public class func createCubicBezierEasingFunction(_ owner: Compositor!, _ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2) throws -> CubicBezierEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateCubicBezierEasingFunction(owner, controlPoint1, controlPoint2)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createlineareasingfunction)
    public class func createLinearEasingFunction(_ owner: Compositor!) throws -> LinearEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateLinearEasingFunction(owner)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createstepeasingfunction)
    public class func createStepEasingFunction(_ owner: Compositor!) throws -> StepEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateStepEasingFunction(owner)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createstepeasingfunction)
    public class func createStepEasingFunction(_ owner: Compositor!, _ stepCount: Int32) throws -> StepEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateStepEasingFunctionWithStepCount(owner, stepCount)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createbackeasingfunction)
    public class func createBackEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode, _ amplitude: Float) throws -> BackEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateBackEasingFunction(owner, mode, amplitude)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createbounceeasingfunction)
    public class func createBounceEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode, _ bounces: Int32, _ bounciness: Float) throws -> BounceEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateBounceEasingFunction(owner, mode, bounces, bounciness)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createcircleeasingfunction)
    public class func createCircleEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode) throws -> CircleEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateCircleEasingFunction(owner, mode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createelasticeasingfunction)
    public class func createElasticEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode, _ oscillations: Int32, _ springiness: Float) throws -> ElasticEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateElasticEasingFunction(owner, mode, oscillations, springiness)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createexponentialeasingfunction)
    public class func createExponentialEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode, _ exponent: Float) throws -> ExponentialEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateExponentialEasingFunction(owner, mode, exponent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createpowereasingfunction)
    public class func createPowerEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode, _ power: Float) throws -> PowerEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreatePowerEasingFunction(owner, mode, power)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneasingfunction.createsineeasingfunction)
    public class func createSineEasingFunction(_ owner: Compositor!, _ mode: CompositionEasingFunctionMode) throws -> SineEasingFunction! {
        return try _ICompositionEasingFunctionStatics.CreateSineEasingFunction(owner, mode)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectbrush)
public final class CompositionEffectBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionEffectBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionEffectBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectbrush.getsourceparameter)
    public func getSourceParameter(_ name: String) throws -> CompositionBrush! {
        try _default.GetSourceParameter(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectbrush.setsourceparameter)
    public func setSourceParameter(_ name: String, _ source: CompositionBrush!) throws {
        try _default.SetSourceParameter(name, source)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectfactory)
public final class CompositionEffectFactory : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionEffectFactory
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionEffectFactory
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectfactory.createbrush)
    public func createBrush() throws -> CompositionEffectBrush! {
        try _default.CreateBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectfactory.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedError() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectfactory.loadstatus)
    public var loadStatus : CompositionEffectFactoryLoadStatus {
        get { try! _default.get_LoadStatus() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectsourceparameter)
public final class CompositionEffectSourceParameter : WinRTClass, UWP.IGraphicsEffectSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionEffectSourceParameter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionEffectSourceParameter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICompositionEffectSourceParameterFactory: __ABI_Microsoft_UI_Composition.ICompositionEffectSourceParameterFactory = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionEffectSourceParameter")
    public init(_ name: String) {
        super.init(try! Self._ICompositionEffectSourceParameterFactory.Create(name))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositioneffectsourceparameter.name)
    public var name : String {
        get { try! _default.get_Name() }
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    deinit {
        _default = nil
        _IGraphicsEffectSource = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionellipsegeometry)
public final class CompositionEllipseGeometry : WinAppSDK.CompositionGeometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionEllipseGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionEllipseGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionellipsegeometry.center)
    public var center : WindowsFoundation.Vector2 {
        get { try! _default.get_Center() }
        set { try! _default.put_Center(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionellipsegeometry.radius)
    public var radius : WindowsFoundation.Vector2 {
        get { try! _default.get_Radius() }
        set { try! _default.put_Radius(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometricclip)
public final class CompositionGeometricClip : WinAppSDK.CompositionClip {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionGeometricClip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionGeometricClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometricclip.geometry)
    public var geometry : CompositionGeometry! {
        get { try! _default.get_Geometry() }
        set { try! _default.put_Geometry(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometricclip.viewbox)
    public var viewBox : CompositionViewBox! {
        get { try! _default.get_ViewBox() }
        set { try! _default.put_ViewBox(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometry)
open class CompositionGeometry : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionGeometryFactory : __ABI_Microsoft_UI_Composition.ICompositionGeometryFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionGeometry")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometry.trimend)
    public var trimEnd : Float {
        get { try! _default.get_TrimEnd() }
        set { try! _default.put_TrimEnd(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometry.trimoffset)
    public var trimOffset : Float {
        get { try! _default.get_TrimOffset() }
        set { try! _default.put_TrimOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongeometry.trimstart)
    public var trimStart : Float {
        get { try! _default.get_TrimStart() }
        set { try! _default.put_TrimStart(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush)
open class CompositionGradientBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionGradientBrushFactory : __ABI_Microsoft_UI_Composition.ICompositionGradientBrushFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionGradientBrush")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_AnchorPoint() }
        set { try! _default.put_AnchorPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPoint() }
        set { try! _default.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.colorstops)
    public var colorStops : CompositionColorGradientStopCollection! {
        get { try! _default.get_ColorStops() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.extendmode)
    public var extendMode : CompositionGradientExtendMode {
        get { try! _default.get_ExtendMode() }
        set { try! _default.put_ExtendMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.interpolationspace)
    public var interpolationSpace : CompositionColorSpace {
        get { try! _default.get_InterpolationSpace() }
        set { try! _default.put_InterpolationSpace(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.rotationangle)
    public var rotationAngle : Float {
        get { try! _default.get_RotationAngle() }
        set { try! _default.put_RotationAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _default.get_RotationAngleInDegrees() }
        set { try! _default.put_RotationAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _default.get_Scale() }
        set { try! _default.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    private lazy var _ICompositionGradientBrush2: __ABI_Microsoft_UI_Composition.ICompositionGradientBrush2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongradientbrush.mappingmode)
    public var mappingMode : CompositionMappingMode {
        get { try! _ICompositionGradientBrush2.get_MappingMode() }
        set { try! _ICompositionGradientBrush2.put_MappingMode(newValue) }
    }

    deinit {
        _default = nil
        _ICompositionGradientBrush2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice)
public final class CompositionGraphicsDevice : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionGraphicsDevice
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionGraphicsDevice
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.createdrawingsurface)
    public func createDrawingSurface(_ sizePixels: WindowsFoundation.Size, _ pixelFormat: WinAppSDK.DirectXPixelFormat, _ alphaMode: WinAppSDK.DirectXAlphaMode) throws -> CompositionDrawingSurface! {
        try _default.CreateDrawingSurface(sizePixels, pixelFormat, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.renderingdevicereplaced)
    public lazy var renderingDeviceReplaced : Event<TypedEventHandler<CompositionGraphicsDevice?, RenderingDeviceReplacedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RenderingDeviceReplaced($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RenderingDeviceReplaced($0)
       }
      )
    }()

    private lazy var _ICompositionGraphicsDevice2: __ABI_Microsoft_UI_Composition.ICompositionGraphicsDevice2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.createdrawingsurface2)
    public func createDrawingSurface2(_ sizePixels: UWP.SizeInt32, _ pixelFormat: WinAppSDK.DirectXPixelFormat, _ alphaMode: WinAppSDK.DirectXAlphaMode) throws -> CompositionDrawingSurface! {
        try _ICompositionGraphicsDevice2.CreateDrawingSurface2(sizePixels, pixelFormat, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.createvirtualdrawingsurface)
    public func createVirtualDrawingSurface(_ sizePixels: UWP.SizeInt32, _ pixelFormat: WinAppSDK.DirectXPixelFormat, _ alphaMode: WinAppSDK.DirectXAlphaMode) throws -> CompositionVirtualDrawingSurface! {
        try _ICompositionGraphicsDevice2.CreateVirtualDrawingSurface(sizePixels, pixelFormat, alphaMode)
    }

    private lazy var _ICompositionGraphicsDevice3: __ABI_Microsoft_UI_Composition.ICompositionGraphicsDevice3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.createmipmapsurface)
    public func createMipmapSurface(_ sizePixels: UWP.SizeInt32, _ pixelFormat: WinAppSDK.DirectXPixelFormat, _ alphaMode: WinAppSDK.DirectXAlphaMode) throws -> CompositionMipmapSurface! {
        try _ICompositionGraphicsDevice3.CreateMipmapSurface(sizePixels, pixelFormat, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.trim)
    public func trim() throws {
        try _ICompositionGraphicsDevice3.Trim()
    }

    private lazy var _ICompositionGraphicsDevice4: __ABI_Microsoft_UI_Composition.ICompositionGraphicsDevice4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiongraphicsdevice.captureasync)
    public func captureAsync(_ captureVisual: Visual!, _ size: UWP.SizeInt32, _ pixelFormat: WinAppSDK.DirectXPixelFormat, _ alphaMode: WinAppSDK.DirectXAlphaMode, _ sdrBoost: Float) throws -> WindowsFoundation.AnyIAsyncOperation<AnyICompositionSurface?>! {
        try _ICompositionGraphicsDevice4.CaptureAsync(captureVisual, size, pixelFormat, alphaMode, sdrBoost)
    }

    deinit {
        _default = nil
        _ICompositionGraphicsDevice2 = nil
        _ICompositionGraphicsDevice3 = nil
        _ICompositionGraphicsDevice4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlight)
open class CompositionLight : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionLightFactory : __ABI_Microsoft_UI_Composition.ICompositionLightFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionLight")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlight.targets)
    public var targets : VisualUnorderedCollection! {
        get { try! _default.get_Targets() }
    }

    private lazy var _ICompositionLight2: __ABI_Microsoft_UI_Composition.ICompositionLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlight.exclusionsfromtargets)
    public var exclusionsFromTargets : VisualUnorderedCollection! {
        get { try! _ICompositionLight2.get_ExclusionsFromTargets() }
    }

    private lazy var _ICompositionLight3: __ABI_Microsoft_UI_Composition.ICompositionLight3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlight.isenabled)
    public var isEnabled : Bool {
        get { try! _ICompositionLight3.get_IsEnabled() }
        set { try! _ICompositionLight3.put_IsEnabled(newValue) }
    }

    deinit {
        _default = nil
        _ICompositionLight2 = nil
        _ICompositionLight3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlinegeometry)
public final class CompositionLineGeometry : WinAppSDK.CompositionGeometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionLineGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionLineGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlinegeometry.end)
    public var end : WindowsFoundation.Vector2 {
        get { try! _default.get_End() }
        set { try! _default.put_End(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlinegeometry.start)
    public var start : WindowsFoundation.Vector2 {
        get { try! _default.get_Start() }
        set { try! _default.put_Start(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlineargradientbrush)
public final class CompositionLinearGradientBrush : WinAppSDK.CompositionGradientBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionLinearGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionLinearGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlineargradientbrush.endpoint)
    public var endPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_EndPoint() }
        set { try! _default.put_EndPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionlineargradientbrush.startpoint)
    public var startPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_StartPoint() }
        set { try! _default.put_StartPoint(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmaskbrush)
public final class CompositionMaskBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionMaskBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionMaskBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmaskbrush.mask)
    public var mask : CompositionBrush! {
        get { try! _default.get_Mask() }
        set { try! _default.put_Mask(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmaskbrush.source)
    public var source : CompositionBrush! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmipmapsurface)
public final class CompositionMipmapSurface : WinAppSDK.CompositionObject, ICompositionSurface {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionMipmapSurface
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionMipmapSurface
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmipmapsurface.getdrawingsurfaceforlevel)
    public func getDrawingSurfaceForLevel(_ level: UInt32) throws -> CompositionDrawingSurface! {
        try _default.GetDrawingSurfaceForLevel(level)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmipmapsurface.alphamode)
    public var alphaMode : WinAppSDK.DirectXAlphaMode {
        get { try! _default.get_AlphaMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmipmapsurface.levelcount)
    public var levelCount : UInt32 {
        get { try! _default.get_LevelCount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmipmapsurface.pixelformat)
    public var pixelFormat : WinAppSDK.DirectXPixelFormat {
        get { try! _default.get_PixelFormat() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionmipmapsurface.sizeint32)
    public var sizeInt32 : UWP.SizeInt32 {
        get { try! _default.get_SizeInt32() }
    }

    private lazy var _ICompositionSurface: __ABI_Microsoft_UI_Composition.ICompositionSurface! = getInterfaceForCaching()
    deinit {
        _default = nil
        _ICompositionSurface = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush)
public final class CompositionNineGridBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionNineGridBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionNineGridBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.setinsets)
    public func setInsets(_ inset: Float) throws {
        try _default.SetInsets(inset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.setinsets)
    public func setInsets(_ left: Float, _ top: Float, _ right: Float, _ bottom: Float) throws {
        try _default.SetInsetsWithValues(left, top, right, bottom)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.setinsetscales)
    public func setInsetScales(_ scale: Float) throws {
        try _default.SetInsetScales(scale)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.setinsetscales)
    public func setInsetScales(_ left: Float, _ top: Float, _ right: Float, _ bottom: Float) throws {
        try _default.SetInsetScalesWithValues(left, top, right, bottom)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.bottominset)
    public var bottomInset : Float {
        get { try! _default.get_BottomInset() }
        set { try! _default.put_BottomInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.bottominsetscale)
    public var bottomInsetScale : Float {
        get { try! _default.get_BottomInsetScale() }
        set { try! _default.put_BottomInsetScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.iscenterhollow)
    public var isCenterHollow : Bool {
        get { try! _default.get_IsCenterHollow() }
        set { try! _default.put_IsCenterHollow(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.leftinset)
    public var leftInset : Float {
        get { try! _default.get_LeftInset() }
        set { try! _default.put_LeftInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.leftinsetscale)
    public var leftInsetScale : Float {
        get { try! _default.get_LeftInsetScale() }
        set { try! _default.put_LeftInsetScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.rightinset)
    public var rightInset : Float {
        get { try! _default.get_RightInset() }
        set { try! _default.put_RightInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.rightinsetscale)
    public var rightInsetScale : Float {
        get { try! _default.get_RightInsetScale() }
        set { try! _default.put_RightInsetScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.source)
    public var source : CompositionBrush! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.topinset)
    public var topInset : Float {
        get { try! _default.get_TopInset() }
        set { try! _default.put_TopInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionninegridbrush.topinsetscale)
    public var topInsetScale : Float {
        get { try! _default.get_TopInsetScale() }
        set { try! _default.put_TopInsetScale(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject)
open class CompositionObject : WinRTClass, WindowsFoundation.IClosable, IAnimationObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionObject
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionObject
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionObjectFactory : __ABI_Microsoft_UI_Composition.ICompositionObjectFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionObject")

    private static let _ICompositionObjectStatics: __ABI_Microsoft_UI_Composition.ICompositionObjectStatics = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionObject")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.startanimationwithianimationobject)
    public class func startAnimationWithIAnimationObject(_ target: AnyIAnimationObject!, _ propertyName: String, _ animation: CompositionAnimation!) throws {
        try _ICompositionObjectStatics.StartAnimationWithIAnimationObject(target, propertyName, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.startanimationgroupwithianimationobject)
    public class func startAnimationGroupWithIAnimationObject(_ target: AnyIAnimationObject!, _ animation: AnyICompositionAnimationBase!) throws {
        try _ICompositionObjectStatics.StartAnimationGroupWithIAnimationObject(target, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.startanimation)
    public func startAnimation(_ propertyName: String, _ animation: CompositionAnimation!) throws {
        try _default.StartAnimation(propertyName, animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.stopanimation)
    public func stopAnimation(_ propertyName: String) throws {
        try _default.StopAnimation(propertyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.compositor)
    public var compositor : Compositor! {
        get { try! _default.get_Compositor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.properties)
    public var properties : CompositionPropertySet! {
        get { try! _default.get_Properties() }
    }

    private lazy var _ICompositionObject2: __ABI_Microsoft_UI_Composition.ICompositionObject2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.startanimationgroup)
    public func startAnimationGroup(_ value: AnyICompositionAnimationBase!) throws {
        try _ICompositionObject2.StartAnimationGroup(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.stopanimationgroup)
    public func stopAnimationGroup(_ value: AnyICompositionAnimationBase!) throws {
        try _ICompositionObject2.StopAnimationGroup(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.comment)
    public var comment : String {
        get { try! _ICompositionObject2.get_Comment() }
        set { try! _ICompositionObject2.put_Comment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.implicitanimations)
    public var implicitAnimations : ImplicitAnimationCollection! {
        get { try! _ICompositionObject2.get_ImplicitAnimations() }
        set { try! _ICompositionObject2.put_ImplicitAnimations(newValue) }
    }

    private lazy var _ICompositionObject3: __ABI_Microsoft_UI_Composition.ICompositionObject3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _ICompositionObject3.get_DispatcherQueue() }
    }

    private lazy var _ICompositionObject4: __ABI_Microsoft_UI_Composition.ICompositionObject4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.trygetanimationcontroller)
    public func tryGetAnimationController(_ propertyName: String) throws -> AnimationController! {
        try _ICompositionObject4.TryGetAnimationController(propertyName)
    }

    private lazy var _ICompositionObject5: __ABI_Microsoft_UI_Composition.ICompositionObject5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.startanimation)
    public func startAnimation(_ propertyName: String, _ animation: CompositionAnimation!, _ animationController: AnimationController!) throws {
        try _ICompositionObject5.StartAnimationWithController(propertyName, animation, animationController)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _IAnimationObject: __ABI_Microsoft_UI_Composition.IAnimationObject! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionobject.populatepropertyinfo)
    public func populatePropertyInfo(_ propertyName: String, _ propertyInfo: AnimationPropertyInfo!) throws {
        try _IAnimationObject.PopulatePropertyInfo(propertyName, propertyInfo)
    }

    deinit {
        _default = nil
        _ICompositionObject2 = nil
        _ICompositionObject3 = nil
        _ICompositionObject4 = nil
        _ICompositionObject5 = nil
        _IClosable = nil
        _IAnimationObject = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpath)
public final class CompositionPath : WinRTClass, UWP.IGeometrySource2D {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionPath
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionPath
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICompositionPathFactory: __ABI_Microsoft_UI_Composition.ICompositionPathFactory = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionPath")
    public init(_ source: UWP.AnyIGeometrySource2D!) {
        super.init(try! Self._ICompositionPathFactory.Create(source))
    }

    private lazy var _IGeometrySource2D: __ABI_Windows_Graphics.IGeometrySource2D! = getInterfaceForCaching()
    deinit {
        _default = nil
        _IGeometrySource2D = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpathgeometry)
public final class CompositionPathGeometry : WinAppSDK.CompositionGeometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionPathGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionPathGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpathgeometry.path)
    public var path : CompositionPath! {
        get { try! _default.get_Path() }
        set { try! _default.put_Path(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow)
public final class CompositionProjectedShadow : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionProjectedShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionProjectedShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow.blurradiusmultiplier)
    public var blurRadiusMultiplier : Float {
        get { try! _default.get_BlurRadiusMultiplier() }
        set { try! _default.put_BlurRadiusMultiplier(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow.casters)
    public var casters : CompositionProjectedShadowCasterCollection! {
        get { try! _default.get_Casters() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow.lightsource)
    public var lightSource : CompositionLight! {
        get { try! _default.get_LightSource() }
        set { try! _default.put_LightSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow.maxblurradius)
    public var maxBlurRadius : Float {
        get { try! _default.get_MaxBlurRadius() }
        set { try! _default.put_MaxBlurRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow.minblurradius)
    public var minBlurRadius : Float {
        get { try! _default.get_MinBlurRadius() }
        set { try! _default.put_MinBlurRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadow.receivers)
    public var receivers : CompositionProjectedShadowReceiverUnorderedCollection! {
        get { try! _default.get_Receivers() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcaster)
public final class CompositionProjectedShadowCaster : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionProjectedShadowCaster
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionProjectedShadowCaster
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcaster.brush)
    public var brush : CompositionBrush! {
        get { try! _default.get_Brush() }
        set { try! _default.put_Brush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcaster.castingvisual)
    public var castingVisual : Visual! {
        get { try! _default.get_CastingVisual() }
        set { try! _default.put_CastingVisual(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection)
public final class CompositionProjectedShadowCasterCollection : WinAppSDK.CompositionObject, IIterable {
    public typealias T = CompositionProjectedShadowCaster?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionProjectedShadowCasterCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionProjectedShadowCasterCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICompositionProjectedShadowCasterCollectionStatics: __ABI_Microsoft_UI_Composition.ICompositionProjectedShadowCasterCollectionStatics = try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.maxrespectedcasters)
    public static var maxRespectedCasters : Int32 {
        get { try! _ICompositionProjectedShadowCasterCollectionStatics.get_MaxRespectedCasters() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.insertabove)
    public func insertAbove(_ newCaster: CompositionProjectedShadowCaster!, _ reference: CompositionProjectedShadowCaster!) throws {
        try _default.InsertAbove(newCaster, reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.insertatbottom)
    public func insertAtBottom(_ newCaster: CompositionProjectedShadowCaster!) throws {
        try _default.InsertAtBottom(newCaster)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.insertattop)
    public func insertAtTop(_ newCaster: CompositionProjectedShadowCaster!) throws {
        try _default.InsertAtTop(newCaster)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.insertbelow)
    public func insertBelow(_ newCaster: CompositionProjectedShadowCaster!, _ reference: CompositionProjectedShadowCaster!) throws {
        try _default.InsertBelow(newCaster, reference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.remove)
    public func remove(_ caster: CompositionProjectedShadowCaster!) throws {
        try _default.Remove(caster)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.count)
    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    private lazy var _IIterable: IIterableCompositionProjectedShadowCaster! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowcastercollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionProjectedShadowCaster?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiver)
public final class CompositionProjectedShadowReceiver : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionProjectedShadowReceiver
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionProjectedShadowReceiver
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiver.receivingvisual)
    public var receivingVisual : Visual! {
        get { try! _default.get_ReceivingVisual() }
        set { try! _default.put_ReceivingVisual(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiverunorderedcollection)
public final class CompositionProjectedShadowReceiverUnorderedCollection : WinAppSDK.CompositionObject, IIterable {
    public typealias T = CompositionProjectedShadowReceiver?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionProjectedShadowReceiverUnorderedCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionProjectedShadowReceiverUnorderedCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiverunorderedcollection.add)
    public func add(_ value: CompositionProjectedShadowReceiver!) throws {
        try _default.Add(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiverunorderedcollection.remove)
    public func remove(_ value: CompositionProjectedShadowReceiver!) throws {
        try _default.Remove(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiverunorderedcollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiverunorderedcollection.count)
    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    private lazy var _IIterable: IIterableCompositionProjectedShadowReceiver! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionprojectedshadowreceiverunorderedcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionProjectedShadowReceiver?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset)
public final class CompositionPropertySet : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionPropertySet
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionPropertySet
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertcolor)
    public func insertColor(_ propertyName: String, _ value: UWP.Color) throws {
        try _default.InsertColor(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertmatrix3x2)
    public func insertMatrix3x2(_ propertyName: String, _ value: WindowsFoundation.Matrix3x2) throws {
        try _default.InsertMatrix3x2(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertmatrix4x4)
    public func insertMatrix4x4(_ propertyName: String, _ value: WindowsFoundation.Matrix4x4) throws {
        try _default.InsertMatrix4x4(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertquaternion)
    public func insertQuaternion(_ propertyName: String, _ value: WindowsFoundation.Quaternion) throws {
        try _default.InsertQuaternion(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertscalar)
    public func insertScalar(_ propertyName: String, _ value: Float) throws {
        try _default.InsertScalar(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertvector2)
    public func insertVector2(_ propertyName: String, _ value: WindowsFoundation.Vector2) throws {
        try _default.InsertVector2(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertvector3)
    public func insertVector3(_ propertyName: String, _ value: WindowsFoundation.Vector3) throws {
        try _default.InsertVector3(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertvector4)
    public func insertVector4(_ propertyName: String, _ value: WindowsFoundation.Vector4) throws {
        try _default.InsertVector4(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetcolor)
    public func tryGetColor(_ propertyName: String, _ value: inout UWP.Color) throws -> CompositionGetValueStatus {
        try _default.TryGetColor(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetmatrix3x2)
    public func tryGetMatrix3x2(_ propertyName: String, _ value: inout WindowsFoundation.Matrix3x2) throws -> CompositionGetValueStatus {
        try _default.TryGetMatrix3x2(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetmatrix4x4)
    public func tryGetMatrix4x4(_ propertyName: String, _ value: inout WindowsFoundation.Matrix4x4) throws -> CompositionGetValueStatus {
        try _default.TryGetMatrix4x4(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetquaternion)
    public func tryGetQuaternion(_ propertyName: String, _ value: inout WindowsFoundation.Quaternion) throws -> CompositionGetValueStatus {
        try _default.TryGetQuaternion(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetscalar)
    public func tryGetScalar(_ propertyName: String, _ value: inout Float) throws -> CompositionGetValueStatus {
        try _default.TryGetScalar(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetvector2)
    public func tryGetVector2(_ propertyName: String, _ value: inout WindowsFoundation.Vector2) throws -> CompositionGetValueStatus {
        try _default.TryGetVector2(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetvector3)
    public func tryGetVector3(_ propertyName: String, _ value: inout WindowsFoundation.Vector3) throws -> CompositionGetValueStatus {
        try _default.TryGetVector3(propertyName, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetvector4)
    public func tryGetVector4(_ propertyName: String, _ value: inout WindowsFoundation.Vector4) throws -> CompositionGetValueStatus {
        try _default.TryGetVector4(propertyName, &value)
    }

    private lazy var _ICompositionPropertySet2: __ABI_Microsoft_UI_Composition.ICompositionPropertySet2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.insertboolean)
    public func insertBoolean(_ propertyName: String, _ value: Bool) throws {
        try _ICompositionPropertySet2.InsertBoolean(propertyName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionpropertyset.trygetboolean)
    public func tryGetBoolean(_ propertyName: String, _ value: inout Bool) throws -> CompositionGetValueStatus {
        try _ICompositionPropertySet2.TryGetBoolean(propertyName, &value)
    }

    deinit {
        _default = nil
        _ICompositionPropertySet2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionradialgradientbrush)
public final class CompositionRadialGradientBrush : WinAppSDK.CompositionGradientBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionRadialGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionRadialGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionradialgradientbrush.ellipsecenter)
    public var ellipseCenter : WindowsFoundation.Vector2 {
        get { try! _default.get_EllipseCenter() }
        set { try! _default.put_EllipseCenter(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionradialgradientbrush.ellipseradius)
    public var ellipseRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_EllipseRadius() }
        set { try! _default.put_EllipseRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionradialgradientbrush.gradientoriginoffset)
    public var gradientOriginOffset : WindowsFoundation.Vector2 {
        get { try! _default.get_GradientOriginOffset() }
        set { try! _default.put_GradientOriginOffset(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionrectanglegeometry)
public final class CompositionRectangleGeometry : WinAppSDK.CompositionGeometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionRectangleGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionRectangleGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionrectanglegeometry.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionrectanglegeometry.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_Size() }
        set { try! _default.put_Size(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionroundedrectanglegeometry)
public final class CompositionRoundedRectangleGeometry : WinAppSDK.CompositionGeometry {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionRoundedRectangleGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionRoundedRectangleGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionroundedrectanglegeometry.cornerradius)
    public var cornerRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_CornerRadius() }
        set { try! _default.put_CornerRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionroundedrectanglegeometry.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionroundedrectanglegeometry.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_Size() }
        set { try! _default.put_Size(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch)
public final class CompositionScopedBatch : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionScopedBatch
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionScopedBatch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch.end)
    public func end() throws {
        try _default.End()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch.resume)
    public func resume() throws {
        try _default.Resume()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch.suspend)
    public func suspend() throws {
        try _default.Suspend()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActive() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch.isended)
    public var isEnded : Bool {
        get { try! _default.get_IsEnded() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionscopedbatch.completed)
    public lazy var completed : Event<TypedEventHandler<Any?, CompositionBatchCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Completed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Completed($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshadow)
open class CompositionShadow : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionShadowFactory : __ABI_Microsoft_UI_Composition.ICompositionShadowFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionShadow")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape)
open class CompositionShape : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionShape
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionShapeFactory : __ABI_Microsoft_UI_Composition.ICompositionShapeFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionShape")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPoint() }
        set { try! _default.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape.rotationangle)
    public var rotationAngle : Float {
        get { try! _default.get_RotationAngle() }
        set { try! _default.put_RotationAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _default.get_RotationAngleInDegrees() }
        set { try! _default.put_RotationAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _default.get_Scale() }
        set { try! _default.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshape.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection)
public final class CompositionShapeCollection : WinAppSDK.CompositionObject, IVector, IIterable {
    public typealias T = CompositionShape?
    private typealias SwiftABI = WinAppSDK.IVectorCompositionShape
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CComposition__CCompositionShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.getat)
    public func getAt(_ index: UInt32) -> CompositionShape? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<CompositionShape?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.indexof)
    public func indexOf(_ value: CompositionShape?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.setat)
    public func setAt(_ index: UInt32, _ value: CompositionShape?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.insertat)
    public func insertAt(_ index: UInt32, _ value: CompositionShape?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.append)
    public func append(_ value: CompositionShape?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [CompositionShape?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.replaceall)
    public func replaceAll(_ items: [CompositionShape?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCompositionShape! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionshapecollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<CompositionShape?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape)
public final class CompositionSpriteShape : WinAppSDK.CompositionShape {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionSpriteShape
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionSpriteShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.fillbrush)
    public var fillBrush : CompositionBrush! {
        get { try! _default.get_FillBrush() }
        set { try! _default.put_FillBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.geometry)
    public var geometry : CompositionGeometry! {
        get { try! _default.get_Geometry() }
        set { try! _default.put_Geometry(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.isstrokenonscaling)
    public var isStrokeNonScaling : Bool {
        get { try! _default.get_IsStrokeNonScaling() }
        set { try! _default.put_IsStrokeNonScaling(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokebrush)
    public var strokeBrush : CompositionBrush! {
        get { try! _default.get_StrokeBrush() }
        set { try! _default.put_StrokeBrush(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokedasharray)
    public var strokeDashArray : CompositionStrokeDashArray! {
        get { try! _default.get_StrokeDashArray() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokedashcap)
    public var strokeDashCap : CompositionStrokeCap {
        get { try! _default.get_StrokeDashCap() }
        set { try! _default.put_StrokeDashCap(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokedashoffset)
    public var strokeDashOffset : Float {
        get { try! _default.get_StrokeDashOffset() }
        set { try! _default.put_StrokeDashOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokeendcap)
    public var strokeEndCap : CompositionStrokeCap {
        get { try! _default.get_StrokeEndCap() }
        set { try! _default.put_StrokeEndCap(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokelinejoin)
    public var strokeLineJoin : CompositionStrokeLineJoin {
        get { try! _default.get_StrokeLineJoin() }
        set { try! _default.put_StrokeLineJoin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokemiterlimit)
    public var strokeMiterLimit : Float {
        get { try! _default.get_StrokeMiterLimit() }
        set { try! _default.put_StrokeMiterLimit(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokestartcap)
    public var strokeStartCap : CompositionStrokeCap {
        get { try! _default.get_StrokeStartCap() }
        set { try! _default.put_StrokeStartCap(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionspriteshape.strokethickness)
    public var strokeThickness : Float {
        get { try! _default.get_StrokeThickness() }
        set { try! _default.put_StrokeThickness(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray)
public final class CompositionStrokeDashArray : WinAppSDK.CompositionObject, IVector, IIterable {
    public typealias T = Float
    private typealias SwiftABI = WinAppSDK.IVectorFloat
    private typealias CABI = __x_ABI_C__FIVector_1_float
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.getat)
    public func getAt(_ index: UInt32) -> Float {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Float>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.indexof)
    public func indexOf(_ value: Float, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.setat)
    public func setAt(_ index: UInt32, _ value: Float) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.insertat)
    public func insertAt(_ index: UInt32, _ value: Float) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.append)
    public func append(_ value: Float) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.getmany)
    public func getMany(_ startIndex: UInt32, _ items: inout [Float]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.replaceall)
    public func replaceAll(_ items: [Float]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableFloat! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionstrokedasharray.first)
    public func first() -> WindowsFoundation.AnyIIterator<Float>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush)
public final class CompositionSurfaceBrush : WinAppSDK.CompositionBrush {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionSurfaceBrush
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionSurfaceBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.bitmapinterpolationmode)
    public var bitmapInterpolationMode : CompositionBitmapInterpolationMode {
        get { try! _default.get_BitmapInterpolationMode() }
        set { try! _default.put_BitmapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Float {
        get { try! _default.get_HorizontalAlignmentRatio() }
        set { try! _default.put_HorizontalAlignmentRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.stretch)
    public var stretch : CompositionStretch {
        get { try! _default.get_Stretch() }
        set { try! _default.put_Stretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.surface)
    public var surface : AnyICompositionSurface! {
        get { try! _default.get_Surface() }
        set { try! _default.put_Surface(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.verticalalignmentratio)
    public var verticalAlignmentRatio : Float {
        get { try! _default.get_VerticalAlignmentRatio() }
        set { try! _default.put_VerticalAlignmentRatio(newValue) }
    }

    private lazy var _ICompositionSurfaceBrush2: __ABI_Microsoft_UI_Composition.ICompositionSurfaceBrush2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_AnchorPoint() }
        set { try! _ICompositionSurfaceBrush2.put_AnchorPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_CenterPoint() }
        set { try! _ICompositionSurfaceBrush2.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_Offset() }
        set { try! _ICompositionSurfaceBrush2.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.rotationangle)
    public var rotationAngle : Float {
        get { try! _ICompositionSurfaceBrush2.get_RotationAngle() }
        set { try! _ICompositionSurfaceBrush2.put_RotationAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _ICompositionSurfaceBrush2.get_RotationAngleInDegrees() }
        set { try! _ICompositionSurfaceBrush2.put_RotationAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _ICompositionSurfaceBrush2.get_Scale() }
        set { try! _ICompositionSurfaceBrush2.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _ICompositionSurfaceBrush2.get_TransformMatrix() }
        set { try! _ICompositionSurfaceBrush2.put_TransformMatrix(newValue) }
    }

    private lazy var _ICompositionSurfaceBrush3: __ABI_Microsoft_UI_Composition.ICompositionSurfaceBrush3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionsurfacebrush.snaptopixels)
    public var snapToPixels : Bool {
        get { try! _ICompositionSurfaceBrush3.get_SnapToPixels() }
        set { try! _ICompositionSurfaceBrush3.put_SnapToPixels(newValue) }
    }

    deinit {
        _default = nil
        _ICompositionSurfaceBrush2 = nil
        _ICompositionSurfaceBrush3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositiontransform)
open class CompositionTransform : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionTransform
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionTransform
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionTransformFactory : __ABI_Microsoft_UI_Composition.ICompositionTransformFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionTransform")

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionviewbox)
public final class CompositionViewBox : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionViewBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionViewBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionviewbox.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Float {
        get { try! _default.get_HorizontalAlignmentRatio() }
        set { try! _default.put_HorizontalAlignmentRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionviewbox.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionviewbox.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_Size() }
        set { try! _default.put_Size(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionviewbox.stretch)
    public var stretch : CompositionStretch {
        get { try! _default.get_Stretch() }
        set { try! _default.put_Stretch(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionviewbox.verticalalignmentratio)
    public var verticalAlignmentRatio : Float {
        get { try! _default.get_VerticalAlignmentRatio() }
        set { try! _default.put_VerticalAlignmentRatio(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionvirtualdrawingsurface)
open class CompositionVirtualDrawingSurface : WinAppSDK.CompositionDrawingSurface {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionVirtualDrawingSurface
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionVirtualDrawingSurface
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICompositionVirtualDrawingSurfaceFactory : __ABI_Microsoft_UI_Composition.ICompositionVirtualDrawingSurfaceFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.CompositionVirtualDrawingSurface")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionvirtualdrawingsurface.trim)
    public func trim(_ rects: [UWP.RectInt32]) throws {
        try _default.Trim(rects)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionvisualsurface)
public final class CompositionVisualSurface : WinAppSDK.CompositionObject, ICompositionSurface {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositionVisualSurface
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositionVisualSurface
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionvisualsurface.sourceoffset)
    public var sourceOffset : WindowsFoundation.Vector2 {
        get { try! _default.get_SourceOffset() }
        set { try! _default.put_SourceOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionvisualsurface.sourcesize)
    public var sourceSize : WindowsFoundation.Vector2 {
        get { try! _default.get_SourceSize() }
        set { try! _default.put_SourceSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositionvisualsurface.sourcevisual)
    public var sourceVisual : Visual! {
        get { try! _default.get_SourceVisual() }
        set { try! _default.put_SourceVisual(newValue) }
    }

    private lazy var _ICompositionSurface: __ABI_Microsoft_UI_Composition.ICompositionSurface! = getInterfaceForCaching()
    deinit {
        _default = nil
        _ICompositionSurface = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor)
public final class Compositor : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICompositor
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICompositor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.UI.Composition.Compositor")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICompositorStatics: __ABI_Microsoft_UI_Composition.ICompositorStatics = try! RoGetActivationFactory("Microsoft.UI.Composition.Compositor")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.maxglobalplaybackrate)
    public static var maxGlobalPlaybackRate : Float {
        get { try! _ICompositorStatics.get_MaxGlobalPlaybackRate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.minglobalplaybackrate)
    public static var minGlobalPlaybackRate : Float {
        get { try! _ICompositorStatics.get_MinGlobalPlaybackRate() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcolorkeyframeanimation)
    public func createColorKeyFrameAnimation() throws -> ColorKeyFrameAnimation! {
        try _default.CreateColorKeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcolorbrush)
    public func createColorBrush() throws -> CompositionColorBrush! {
        try _default.CreateColorBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcolorbrush)
    public func createColorBrush(_ color: UWP.Color) throws -> CompositionColorBrush! {
        try _default.CreateColorBrushWithColor(color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcontainervisual)
    public func createContainerVisual() throws -> ContainerVisual! {
        try _default.CreateContainerVisual()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcubicbeziereasingfunction)
    public func createCubicBezierEasingFunction(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2) throws -> CubicBezierEasingFunction! {
        try _default.CreateCubicBezierEasingFunction(controlPoint1, controlPoint2)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createeffectfactory)
    public func createEffectFactory(_ graphicsEffect: UWP.AnyIGraphicsEffect!) throws -> CompositionEffectFactory! {
        try _default.CreateEffectFactory(graphicsEffect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createeffectfactory)
    public func createEffectFactory(_ graphicsEffect: UWP.AnyIGraphicsEffect!, _ animatableProperties: WindowsFoundation.AnyIIterable<String>!) throws -> CompositionEffectFactory! {
        try _default.CreateEffectFactoryWithProperties(graphicsEffect, animatableProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createexpressionanimation)
    public func createExpressionAnimation() throws -> ExpressionAnimation! {
        try _default.CreateExpressionAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createexpressionanimation)
    public func createExpressionAnimation(_ expression: String) throws -> ExpressionAnimation! {
        try _default.CreateExpressionAnimationWithExpression(expression)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createinsetclip)
    public func createInsetClip() throws -> InsetClip! {
        try _default.CreateInsetClip()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createinsetclip)
    public func createInsetClip(_ leftInset: Float, _ topInset: Float, _ rightInset: Float, _ bottomInset: Float) throws -> InsetClip! {
        try _default.CreateInsetClipWithInsets(leftInset, topInset, rightInset, bottomInset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createlineareasingfunction)
    public func createLinearEasingFunction() throws -> LinearEasingFunction! {
        try _default.CreateLinearEasingFunction()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createpropertyset)
    public func createPropertySet() throws -> CompositionPropertySet! {
        try _default.CreatePropertySet()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createquaternionkeyframeanimation)
    public func createQuaternionKeyFrameAnimation() throws -> QuaternionKeyFrameAnimation! {
        try _default.CreateQuaternionKeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createscalarkeyframeanimation)
    public func createScalarKeyFrameAnimation() throws -> ScalarKeyFrameAnimation! {
        try _default.CreateScalarKeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createscopedbatch)
    public func createScopedBatch(_ batchType: CompositionBatchTypes) throws -> CompositionScopedBatch! {
        try _default.CreateScopedBatch(batchType)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspritevisual)
    public func createSpriteVisual() throws -> SpriteVisual! {
        try _default.CreateSpriteVisual()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createsurfacebrush)
    public func createSurfaceBrush() throws -> CompositionSurfaceBrush! {
        try _default.CreateSurfaceBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createsurfacebrush)
    public func createSurfaceBrush(_ surface: AnyICompositionSurface!) throws -> CompositionSurfaceBrush! {
        try _default.CreateSurfaceBrushWithSurface(surface)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createvector2keyframeanimation)
    public func createVector2KeyFrameAnimation() throws -> Vector2KeyFrameAnimation! {
        try _default.CreateVector2KeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createvector3keyframeanimation)
    public func createVector3KeyFrameAnimation() throws -> Vector3KeyFrameAnimation! {
        try _default.CreateVector3KeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createvector4keyframeanimation)
    public func createVector4KeyFrameAnimation() throws -> Vector4KeyFrameAnimation! {
        try _default.CreateVector4KeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.getcommitbatch)
    public func getCommitBatch(_ batchType: CompositionBatchTypes) throws -> CompositionCommitBatch! {
        try _default.GetCommitBatch(batchType)
    }

    private lazy var _ICompositor2: __ABI_Microsoft_UI_Composition.ICompositor2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createambientlight)
    public func createAmbientLight() throws -> AmbientLight! {
        try _ICompositor2.CreateAmbientLight()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createanimationgroup)
    public func createAnimationGroup() throws -> CompositionAnimationGroup! {
        try _ICompositor2.CreateAnimationGroup()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createbackdropbrush)
    public func createBackdropBrush() throws -> CompositionBackdropBrush! {
        try _ICompositor2.CreateBackdropBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createdistantlight)
    public func createDistantLight() throws -> DistantLight! {
        try _ICompositor2.CreateDistantLight()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createdropshadow)
    public func createDropShadow() throws -> DropShadow! {
        try _ICompositor2.CreateDropShadow()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createimplicitanimationcollection)
    public func createImplicitAnimationCollection() throws -> ImplicitAnimationCollection! {
        try _ICompositor2.CreateImplicitAnimationCollection()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createlayervisual)
    public func createLayerVisual() throws -> LayerVisual! {
        try _ICompositor2.CreateLayerVisual()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createmaskbrush)
    public func createMaskBrush() throws -> CompositionMaskBrush! {
        try _ICompositor2.CreateMaskBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createninegridbrush)
    public func createNineGridBrush() throws -> CompositionNineGridBrush! {
        try _ICompositor2.CreateNineGridBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createpointlight)
    public func createPointLight() throws -> PointLight! {
        try _ICompositor2.CreatePointLight()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspotlight)
    public func createSpotLight() throws -> SpotLight! {
        try _ICompositor2.CreateSpotLight()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createstepeasingfunction)
    public func createStepEasingFunction() throws -> StepEasingFunction! {
        try _ICompositor2.CreateStepEasingFunction()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createstepeasingfunction)
    public func createStepEasingFunction(_ stepCount: Int32) throws -> StepEasingFunction! {
        try _ICompositor2.CreateStepEasingFunctionWithStepCount(stepCount)
    }

    private lazy var _ICompositor4: __ABI_Microsoft_UI_Composition.ICompositor4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcolorgradientstop)
    public func createColorGradientStop() throws -> CompositionColorGradientStop! {
        try _ICompositor4.CreateColorGradientStop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcolorgradientstop)
    public func createColorGradientStop(_ offset: Float, _ color: UWP.Color) throws -> CompositionColorGradientStop! {
        try _ICompositor4.CreateColorGradientStopWithOffsetAndColor(offset, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createlineargradientbrush)
    public func createLinearGradientBrush() throws -> CompositionLinearGradientBrush! {
        try _ICompositor4.CreateLinearGradientBrush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspringscalaranimation)
    public func createSpringScalarAnimation() throws -> SpringScalarNaturalMotionAnimation! {
        try _ICompositor4.CreateSpringScalarAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspringvector2animation)
    public func createSpringVector2Animation() throws -> SpringVector2NaturalMotionAnimation! {
        try _ICompositor4.CreateSpringVector2Animation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspringvector3animation)
    public func createSpringVector3Animation() throws -> SpringVector3NaturalMotionAnimation! {
        try _ICompositor4.CreateSpringVector3Animation()
    }

    private lazy var _ICompositor5: __ABI_Microsoft_UI_Composition.ICompositor5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createbouncescalaranimation)
    public func createBounceScalarAnimation() throws -> BounceScalarNaturalMotionAnimation! {
        try _ICompositor5.CreateBounceScalarAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createbouncevector2animation)
    public func createBounceVector2Animation() throws -> BounceVector2NaturalMotionAnimation! {
        try _ICompositor5.CreateBounceVector2Animation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createbouncevector3animation)
    public func createBounceVector3Animation() throws -> BounceVector3NaturalMotionAnimation! {
        try _ICompositor5.CreateBounceVector3Animation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createcontainershape)
    public func createContainerShape() throws -> CompositionContainerShape! {
        try _ICompositor5.CreateContainerShape()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createellipsegeometry)
    public func createEllipseGeometry() throws -> CompositionEllipseGeometry! {
        try _ICompositor5.CreateEllipseGeometry()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createlinegeometry)
    public func createLineGeometry() throws -> CompositionLineGeometry! {
        try _ICompositor5.CreateLineGeometry()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createpathgeometry)
    public func createPathGeometry() throws -> CompositionPathGeometry! {
        try _ICompositor5.CreatePathGeometry()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createpathgeometry)
    public func createPathGeometry(_ path: CompositionPath!) throws -> CompositionPathGeometry! {
        try _ICompositor5.CreatePathGeometryWithPath(path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createpathkeyframeanimation)
    public func createPathKeyFrameAnimation() throws -> PathKeyFrameAnimation! {
        try _ICompositor5.CreatePathKeyFrameAnimation()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createrectanglegeometry)
    public func createRectangleGeometry() throws -> CompositionRectangleGeometry! {
        try _ICompositor5.CreateRectangleGeometry()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createroundedrectanglegeometry)
    public func createRoundedRectangleGeometry() throws -> CompositionRoundedRectangleGeometry! {
        try _ICompositor5.CreateRoundedRectangleGeometry()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createshapevisual)
    public func createShapeVisual() throws -> ShapeVisual! {
        try _ICompositor5.CreateShapeVisual()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspriteshape)
    public func createSpriteShape() throws -> CompositionSpriteShape! {
        try _ICompositor5.CreateSpriteShape()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createspriteshape)
    public func createSpriteShape(_ geometry: CompositionGeometry!) throws -> CompositionSpriteShape! {
        try _ICompositor5.CreateSpriteShapeWithGeometry(geometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createviewbox)
    public func createViewBox() throws -> CompositionViewBox! {
        try _ICompositor5.CreateViewBox()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.requestcommitasync)
    public func requestCommitAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _ICompositor5.RequestCommitAsync()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.comment)
    public var comment : String {
        get { try! _ICompositor5.get_Comment() }
        set { try! _ICompositor5.put_Comment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.globalplaybackrate)
    public var globalPlaybackRate : Float {
        get { try! _ICompositor5.get_GlobalPlaybackRate() }
        set { try! _ICompositor5.put_GlobalPlaybackRate(newValue) }
    }

    private lazy var _ICompositor6: __ABI_Microsoft_UI_Composition.ICompositor6! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.creategeometricclip)
    public func createGeometricClip() throws -> CompositionGeometricClip! {
        try _ICompositor6.CreateGeometricClip()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.creategeometricclip)
    public func createGeometricClip(_ geometry: CompositionGeometry!) throws -> CompositionGeometricClip! {
        try _ICompositor6.CreateGeometricClipWithGeometry(geometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createredirectvisual)
    public func createRedirectVisual() throws -> RedirectVisual! {
        try _ICompositor6.CreateRedirectVisual()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createredirectvisual)
    public func createRedirectVisual(_ source: Visual!) throws -> RedirectVisual! {
        try _ICompositor6.CreateRedirectVisualWithSourceVisual(source)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createbooleankeyframeanimation)
    public func createBooleanKeyFrameAnimation() throws -> BooleanKeyFrameAnimation! {
        try _ICompositor6.CreateBooleanKeyFrameAnimation()
    }

    private lazy var _ICompositor7: __ABI_Microsoft_UI_Composition.ICompositor7! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createanimationpropertyinfo)
    public func createAnimationPropertyInfo() throws -> AnimationPropertyInfo! {
        try _ICompositor7.CreateAnimationPropertyInfo()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createrectangleclip)
    public func createRectangleClip() throws -> RectangleClip! {
        try _ICompositor7.CreateRectangleClip()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createrectangleclip)
    public func createRectangleClip(_ left: Float, _ top: Float, _ right: Float, _ bottom: Float) throws -> RectangleClip! {
        try _ICompositor7.CreateRectangleClipWithSides(left, top, right, bottom)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createrectangleclip)
    public func createRectangleClip(_ left: Float, _ top: Float, _ right: Float, _ bottom: Float, _ topLeftRadius: WindowsFoundation.Vector2, _ topRightRadius: WindowsFoundation.Vector2, _ bottomRightRadius: WindowsFoundation.Vector2, _ bottomLeftRadius: WindowsFoundation.Vector2) throws -> RectangleClip! {
        try _ICompositor7.CreateRectangleClipWithSidesAndRadius(left, top, right, bottom, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _ICompositor7.get_DispatcherQueue() }
    }

    private lazy var _ICompositorWithProjectedShadow: __ABI_Microsoft_UI_Composition.ICompositorWithProjectedShadow! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createprojectedshadowcaster)
    public func createProjectedShadowCaster() throws -> CompositionProjectedShadowCaster! {
        try _ICompositorWithProjectedShadow.CreateProjectedShadowCaster()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createprojectedshadow)
    public func createProjectedShadow() throws -> CompositionProjectedShadow! {
        try _ICompositorWithProjectedShadow.CreateProjectedShadow()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createprojectedshadowreceiver)
    public func createProjectedShadowReceiver() throws -> CompositionProjectedShadowReceiver! {
        try _ICompositorWithProjectedShadow.CreateProjectedShadowReceiver()
    }

    private lazy var _ICompositorWithRadialGradient: __ABI_Microsoft_UI_Composition.ICompositorWithRadialGradient! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createradialgradientbrush)
    public func createRadialGradientBrush() throws -> CompositionRadialGradientBrush! {
        try _ICompositorWithRadialGradient.CreateRadialGradientBrush()
    }

    private lazy var _ICompositorWithVisualSurface: __ABI_Microsoft_UI_Composition.ICompositorWithVisualSurface! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createvisualsurface)
    public func createVisualSurface() throws -> CompositionVisualSurface! {
        try _ICompositorWithVisualSurface.CreateVisualSurface()
    }

    private lazy var _ICompositor8: __ABI_Microsoft_UI_Composition.ICompositor8! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.createanimationcontroller)
    public func createAnimationController() throws -> AnimationController! {
        try _ICompositor8.CreateAnimationController()
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.compositor.close)
    public func close() throws {
        try _IClosable.Close()
    }

    deinit {
        _default = nil
        _ICompositor2 = nil
        _ICompositor4 = nil
        _ICompositor5 = nil
        _ICompositor6 = nil
        _ICompositor7 = nil
        _ICompositorWithProjectedShadow = nil
        _ICompositorWithRadialGradient = nil
        _ICompositorWithVisualSurface = nil
        _ICompositor8 = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.containervisual)
open class ContainerVisual : WinAppSDK.Visual {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IContainerVisual
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIContainerVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContainerVisualFactory : __ABI_Microsoft_UI_Composition.IContainerVisualFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.ContainerVisual")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.containervisual.children)
    public var children : VisualCollection! {
        get { try! _default.get_Children() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.cubicbeziereasingfunction)
public final class CubicBezierEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ICubicBezierEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CICubicBezierEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.cubicbeziereasingfunction.controlpoint1)
    public var controlPoint1 : WindowsFoundation.Vector2 {
        get { try! _default.get_ControlPoint1() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.cubicbeziereasingfunction.controlpoint2)
    public var controlPoint2 : WindowsFoundation.Vector2 {
        get { try! _default.get_ControlPoint2() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.distantlight)
public final class DistantLight : WinAppSDK.CompositionLight {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IDistantLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIDistantLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.distantlight.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.distantlight.coordinatespace)
    public var coordinateSpace : Visual! {
        get { try! _default.get_CoordinateSpace() }
        set { try! _default.put_CoordinateSpace(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.distantlight.direction)
    public var direction : WindowsFoundation.Vector3 {
        get { try! _default.get_Direction() }
        set { try! _default.put_Direction(newValue) }
    }

    private lazy var _IDistantLight2: __ABI_Microsoft_UI_Composition.IDistantLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.distantlight.intensity)
    public var intensity : Float {
        get { try! _IDistantLight2.get_Intensity() }
        set { try! _IDistantLight2.put_Intensity(newValue) }
    }

    deinit {
        _default = nil
        _IDistantLight2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow)
public final class DropShadow : WinAppSDK.CompositionShadow {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IDropShadow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIDropShadow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow.blurradius)
    public var blurRadius : Float {
        get { try! _default.get_BlurRadius() }
        set { try! _default.put_BlurRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow.mask)
    public var mask : CompositionBrush! {
        get { try! _default.get_Mask() }
        set { try! _default.put_Mask(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow.opacity)
    public var opacity : Float {
        get { try! _default.get_Opacity() }
        set { try! _default.put_Opacity(newValue) }
    }

    private lazy var _IDropShadow2: __ABI_Microsoft_UI_Composition.IDropShadow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.dropshadow.sourcepolicy)
    public var sourcePolicy : CompositionDropShadowSourcePolicy {
        get { try! _IDropShadow2.get_SourcePolicy() }
        set { try! _IDropShadow2.put_SourcePolicy(newValue) }
    }

    deinit {
        _default = nil
        _IDropShadow2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.elasticeasingfunction)
public final class ElasticEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IElasticEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIElasticEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.elasticeasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.elasticeasingfunction.oscillations)
    public var oscillations : Int32 {
        get { try! _default.get_Oscillations() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.elasticeasingfunction.springiness)
    public var springiness : Float {
        get { try! _default.get_Springiness() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.exponentialeasingfunction)
public final class ExponentialEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IExponentialEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIExponentialEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.exponentialeasingfunction.exponent)
    public var exponent : Float {
        get { try! _default.get_Exponent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.exponentialeasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.expressionanimation)
public final class ExpressionAnimation : WinAppSDK.CompositionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IExpressionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIExpressionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.expressionanimation.expression)
    public var expression : String {
        get { try! _default.get_Expression() }
        set { try! _default.put_Expression(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection)
public final class ImplicitAnimationCollection : WinAppSDK.CompositionObject, IIterable, IMap {
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, AnyICompositionAnimationBase?>?
    public typealias K = String
    public typealias V = AnyICompositionAnimationBase?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IImplicitAnimationCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIImplicitAnimationCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IIterable: IIterableIKeyValuePairString_ICompositionAnimationBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, AnyICompositionAnimationBase?>?>? {
        try! _IIterable.First()
    }

    private lazy var _IMap: IMapString_ICompositionAnimationBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.lookup)
    public func lookup(_ key: String) -> AnyICompositionAnimationBase? {
        try! _IMap.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _IMap.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<String, AnyICompositionAnimationBase?>? {
        try! _IMap.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.insert)
    public func insert(_ key: String, _ value: AnyICompositionAnimationBase?) -> Bool {
        try! _IMap.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.remove)
    public func remove(_ key: String) {
        try! _IMap.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.clear)
    public func clear() {
        try! _IMap.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.implicitanimationcollection.size)
    public var size : UInt32 {
        get { try! _IMap.get_Size() }
    }

    deinit {
        _default = nil
        _IIterable = nil
        _IMap = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection)
public final class InitialValueExpressionCollection : WinAppSDK.CompositionObject, IMap, IIterable {
    public typealias K = String
    public typealias V = String
    public typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    private typealias SwiftABI = WinAppSDK.IMapString_String
    private typealias CABI = __x_ABI_C__FIMap_2_HSTRING_HSTRING
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.lookup)
    public func lookup(_ key: String) -> String {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.haskey)
    public func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIMapView<String, String>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.insert)
    public func insert(_ key: String, _ value: String) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.remove)
    public func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.clear)
    public func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.initialvalueexpressioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.insetclip)
public final class InsetClip : WinAppSDK.CompositionClip {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IInsetClip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIInsetClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.insetclip.bottominset)
    public var bottomInset : Float {
        get { try! _default.get_BottomInset() }
        set { try! _default.put_BottomInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.insetclip.leftinset)
    public var leftInset : Float {
        get { try! _default.get_LeftInset() }
        set { try! _default.put_LeftInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.insetclip.rightinset)
    public var rightInset : Float {
        get { try! _default.get_RightInset() }
        set { try! _default.put_RightInset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.insetclip.topinset)
    public var topInset : Float {
        get { try! _default.get_TopInset() }
        set { try! _default.put_TopInset(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation)
open class KeyFrameAnimation : WinAppSDK.CompositionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IKeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IKeyFrameAnimationFactory : __ABI_Microsoft_UI_Composition.IKeyFrameAnimationFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.KeyFrameAnimation")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.insertexpressionkeyframe)
    public func insertExpressionKeyFrame(_ normalizedProgressKey: Float, _ value: String) throws {
        try _default.InsertExpressionKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.insertexpressionkeyframe)
    public func insertExpressionKeyFrame(_ normalizedProgressKey: Float, _ value: String, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertExpressionKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.delaytime)
    public var delayTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_DelayTime() }
        set { try! _default.put_DelayTime(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_Duration() }
        set { try! _default.put_Duration(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.iterationbehavior)
    public var iterationBehavior : AnimationIterationBehavior {
        get { try! _default.get_IterationBehavior() }
        set { try! _default.put_IterationBehavior(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.iterationcount)
    public var iterationCount : Int32 {
        get { try! _default.get_IterationCount() }
        set { try! _default.put_IterationCount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.keyframecount)
    public var keyFrameCount : Int32 {
        get { try! _default.get_KeyFrameCount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.stopbehavior)
    public var stopBehavior : AnimationStopBehavior {
        get { try! _default.get_StopBehavior() }
        set { try! _default.put_StopBehavior(newValue) }
    }

    private lazy var _IKeyFrameAnimation2: __ABI_Microsoft_UI_Composition.IKeyFrameAnimation2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.direction)
    public var direction : AnimationDirection {
        get { try! _IKeyFrameAnimation2.get_Direction() }
        set { try! _IKeyFrameAnimation2.put_Direction(newValue) }
    }

    private lazy var _IKeyFrameAnimation3: __ABI_Microsoft_UI_Composition.IKeyFrameAnimation3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.keyframeanimation.delaybehavior)
    public var delayBehavior : AnimationDelayBehavior {
        get { try! _IKeyFrameAnimation3.get_DelayBehavior() }
        set { try! _IKeyFrameAnimation3.put_DelayBehavior(newValue) }
    }

    deinit {
        _default = nil
        _IKeyFrameAnimation2 = nil
        _IKeyFrameAnimation3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.layervisual)
public final class LayerVisual : WinAppSDK.ContainerVisual {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ILayerVisual
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CILayerVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.layervisual.effect)
    public var effect : CompositionEffectBrush! {
        get { try! _default.get_Effect() }
        set { try! _default.put_Effect(newValue) }
    }

    private lazy var _ILayerVisual2: __ABI_Microsoft_UI_Composition.ILayerVisual2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.layervisual.shadow)
    public var shadow : CompositionShadow! {
        get { try! _ILayerVisual2.get_Shadow() }
        set { try! _ILayerVisual2.put_Shadow(newValue) }
    }

    deinit {
        _default = nil
        _ILayerVisual2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.lineareasingfunction)
public final class LinearEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ILinearEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CILinearEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.naturalmotionanimation)
open class NaturalMotionAnimation : WinAppSDK.CompositionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.INaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CINaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INaturalMotionAnimationFactory : __ABI_Microsoft_UI_Composition.INaturalMotionAnimationFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.NaturalMotionAnimation")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.naturalmotionanimation.delaybehavior)
    public var delayBehavior : AnimationDelayBehavior {
        get { try! _default.get_DelayBehavior() }
        set { try! _default.put_DelayBehavior(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.naturalmotionanimation.delaytime)
    public var delayTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_DelayTime() }
        set { try! _default.put_DelayTime(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.naturalmotionanimation.stopbehavior)
    public var stopBehavior : AnimationStopBehavior {
        get { try! _default.get_StopBehavior() }
        set { try! _default.put_StopBehavior(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pathkeyframeanimation)
public final class PathKeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IPathKeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIPathKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pathkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ path: CompositionPath!) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, path)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pathkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ path: CompositionPath!, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, path, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight)
public final class PointLight : WinAppSDK.CompositionLight {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IPointLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIPointLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.constantattenuation)
    public var constantAttenuation : Float {
        get { try! _default.get_ConstantAttenuation() }
        set { try! _default.put_ConstantAttenuation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.coordinatespace)
    public var coordinateSpace : Visual! {
        get { try! _default.get_CoordinateSpace() }
        set { try! _default.put_CoordinateSpace(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.linearattenuation)
    public var linearAttenuation : Float {
        get { try! _default.get_LinearAttenuation() }
        set { try! _default.put_LinearAttenuation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.quadraticattenuation)
    public var quadraticAttenuation : Float {
        get { try! _default.get_QuadraticAttenuation() }
        set { try! _default.put_QuadraticAttenuation(newValue) }
    }

    private lazy var _IPointLight2: __ABI_Microsoft_UI_Composition.IPointLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.intensity)
    public var intensity : Float {
        get { try! _IPointLight2.get_Intensity() }
        set { try! _IPointLight2.put_Intensity(newValue) }
    }

    private lazy var _IPointLight3: __ABI_Microsoft_UI_Composition.IPointLight3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.maxattenuationcutoff)
    public var maxAttenuationCutoff : Float {
        get { try! _IPointLight3.get_MaxAttenuationCutoff() }
        set { try! _IPointLight3.put_MaxAttenuationCutoff(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.pointlight.minattenuationcutoff)
    public var minAttenuationCutoff : Float {
        get { try! _IPointLight3.get_MinAttenuationCutoff() }
        set { try! _IPointLight3.put_MinAttenuationCutoff(newValue) }
    }

    deinit {
        _default = nil
        _IPointLight2 = nil
        _IPointLight3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.powereasingfunction)
public final class PowerEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IPowerEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIPowerEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.powereasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.powereasingfunction.power)
    public var power : Float {
        get { try! _default.get_Power() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.quaternionkeyframeanimation)
public final class QuaternionKeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IQuaternionKeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIQuaternionKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.quaternionkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Quaternion) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.quaternionkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Quaternion, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip)
public final class RectangleClip : WinAppSDK.CompositionClip {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IRectangleClip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIRectangleClip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.bottom)
    public var bottom : Float {
        get { try! _default.get_Bottom() }
        set { try! _default.put_Bottom(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.bottomleftradius)
    public var bottomLeftRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_BottomLeftRadius() }
        set { try! _default.put_BottomLeftRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.bottomrightradius)
    public var bottomRightRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_BottomRightRadius() }
        set { try! _default.put_BottomRightRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.left)
    public var left : Float {
        get { try! _default.get_Left() }
        set { try! _default.put_Left(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.right)
    public var right : Float {
        get { try! _default.get_Right() }
        set { try! _default.put_Right(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.top)
    public var top : Float {
        get { try! _default.get_Top() }
        set { try! _default.put_Top(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.topleftradius)
    public var topLeftRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_TopLeftRadius() }
        set { try! _default.put_TopLeftRadius(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip.toprightradius)
    public var topRightRadius : WindowsFoundation.Vector2 {
        get { try! _default.get_TopRightRadius() }
        set { try! _default.put_TopRightRadius(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.redirectvisual)
public final class RedirectVisual : WinAppSDK.ContainerVisual {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IRedirectVisual
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIRedirectVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.redirectvisual.source)
    public var source : Visual! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.renderingdevicereplacedeventargs)
public final class RenderingDeviceReplacedEventArgs : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IRenderingDeviceReplacedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIRenderingDeviceReplacedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.renderingdevicereplacedeventargs.graphicsdevice)
    public var graphicsDevice : CompositionGraphicsDevice! {
        get { try! _default.get_GraphicsDevice() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarkeyframeanimation)
public final class ScalarKeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IScalarKeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIScalarKeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: Float) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarkeyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: Float, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarnaturalmotionanimation)
open class ScalarNaturalMotionAnimation : WinAppSDK.NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IScalarNaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIScalarNaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScalarNaturalMotionAnimationFactory : __ABI_Microsoft_UI_Composition.IScalarNaturalMotionAnimationFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.ScalarNaturalMotionAnimation")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarnaturalmotionanimation.finalvalue)
    public var finalValue : Float? {
        get { try! _default.get_FinalValue() }
        set { try! _default.put_FinalValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarnaturalmotionanimation.initialvalue)
    public var initialValue : Float? {
        get { try! _default.get_InitialValue() }
        set { try! _default.put_InitialValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.scalarnaturalmotionanimation.initialvelocity)
    public var initialVelocity : Float {
        get { try! _default.get_InitialVelocity() }
        set { try! _default.put_InitialVelocity(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.shapevisual)
public final class ShapeVisual : WinAppSDK.ContainerVisual {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IShapeVisual
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIShapeVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.shapevisual.shapes)
    public var shapes : CompositionShapeCollection! {
        get { try! _default.get_Shapes() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.shapevisual.viewbox)
    public var viewBox : CompositionViewBox! {
        get { try! _default.get_ViewBox() }
        set { try! _default.put_ViewBox(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.sineeasingfunction)
public final class SineEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ISineEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CISineEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.sineeasingfunction.mode)
    public var mode : CompositionEasingFunctionMode {
        get { try! _default.get_Mode() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight)
public final class SpotLight : WinAppSDK.CompositionLight {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ISpotLight
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CISpotLight
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.constantattenuation)
    public var constantAttenuation : Float {
        get { try! _default.get_ConstantAttenuation() }
        set { try! _default.put_ConstantAttenuation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.coordinatespace)
    public var coordinateSpace : Visual! {
        get { try! _default.get_CoordinateSpace() }
        set { try! _default.put_CoordinateSpace(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.direction)
    public var direction : WindowsFoundation.Vector3 {
        get { try! _default.get_Direction() }
        set { try! _default.put_Direction(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.innerconeangle)
    public var innerConeAngle : Float {
        get { try! _default.get_InnerConeAngle() }
        set { try! _default.put_InnerConeAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.innerconeangleindegrees)
    public var innerConeAngleInDegrees : Float {
        get { try! _default.get_InnerConeAngleInDegrees() }
        set { try! _default.put_InnerConeAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.innerconecolor)
    public var innerConeColor : UWP.Color {
        get { try! _default.get_InnerConeColor() }
        set { try! _default.put_InnerConeColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.linearattenuation)
    public var linearAttenuation : Float {
        get { try! _default.get_LinearAttenuation() }
        set { try! _default.put_LinearAttenuation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.outerconeangle)
    public var outerConeAngle : Float {
        get { try! _default.get_OuterConeAngle() }
        set { try! _default.put_OuterConeAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.outerconeangleindegrees)
    public var outerConeAngleInDegrees : Float {
        get { try! _default.get_OuterConeAngleInDegrees() }
        set { try! _default.put_OuterConeAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.outerconecolor)
    public var outerConeColor : UWP.Color {
        get { try! _default.get_OuterConeColor() }
        set { try! _default.put_OuterConeColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.quadraticattenuation)
    public var quadraticAttenuation : Float {
        get { try! _default.get_QuadraticAttenuation() }
        set { try! _default.put_QuadraticAttenuation(newValue) }
    }

    private lazy var _ISpotLight2: __ABI_Microsoft_UI_Composition.ISpotLight2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.innerconeintensity)
    public var innerConeIntensity : Float {
        get { try! _ISpotLight2.get_InnerConeIntensity() }
        set { try! _ISpotLight2.put_InnerConeIntensity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.outerconeintensity)
    public var outerConeIntensity : Float {
        get { try! _ISpotLight2.get_OuterConeIntensity() }
        set { try! _ISpotLight2.put_OuterConeIntensity(newValue) }
    }

    private lazy var _ISpotLight3: __ABI_Microsoft_UI_Composition.ISpotLight3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.maxattenuationcutoff)
    public var maxAttenuationCutoff : Float {
        get { try! _ISpotLight3.get_MaxAttenuationCutoff() }
        set { try! _ISpotLight3.put_MaxAttenuationCutoff(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spotlight.minattenuationcutoff)
    public var minAttenuationCutoff : Float {
        get { try! _ISpotLight3.get_MinAttenuationCutoff() }
        set { try! _ISpotLight3.put_MinAttenuationCutoff(newValue) }
    }

    deinit {
        _default = nil
        _ISpotLight2 = nil
        _ISpotLight3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springscalarnaturalmotionanimation)
public final class SpringScalarNaturalMotionAnimation : WinAppSDK.ScalarNaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ISpringScalarNaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CISpringScalarNaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springscalarnaturalmotionanimation.dampingratio)
    public var dampingRatio : Float {
        get { try! _default.get_DampingRatio() }
        set { try! _default.put_DampingRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springscalarnaturalmotionanimation.period)
    public var period : WindowsFoundation.TimeSpan {
        get { try! _default.get_Period() }
        set { try! _default.put_Period(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springvector2naturalmotionanimation)
public final class SpringVector2NaturalMotionAnimation : WinAppSDK.Vector2NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ISpringVector2NaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CISpringVector2NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springvector2naturalmotionanimation.dampingratio)
    public var dampingRatio : Float {
        get { try! _default.get_DampingRatio() }
        set { try! _default.put_DampingRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springvector2naturalmotionanimation.period)
    public var period : WindowsFoundation.TimeSpan {
        get { try! _default.get_Period() }
        set { try! _default.put_Period(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springvector3naturalmotionanimation)
public final class SpringVector3NaturalMotionAnimation : WinAppSDK.Vector3NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ISpringVector3NaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CISpringVector3NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springvector3naturalmotionanimation.dampingratio)
    public var dampingRatio : Float {
        get { try! _default.get_DampingRatio() }
        set { try! _default.put_DampingRatio(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.springvector3naturalmotionanimation.period)
    public var period : WindowsFoundation.TimeSpan {
        get { try! _default.get_Period() }
        set { try! _default.put_Period(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spritevisual)
public final class SpriteVisual : WinAppSDK.ContainerVisual {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.ISpriteVisual
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CISpriteVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spritevisual.brush)
    public var brush : CompositionBrush! {
        get { try! _default.get_Brush() }
        set { try! _default.put_Brush(newValue) }
    }

    private lazy var _ISpriteVisual2: __ABI_Microsoft_UI_Composition.ISpriteVisual2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.spritevisual.shadow)
    public var shadow : CompositionShadow! {
        get { try! _ISpriteVisual2.get_Shadow() }
        set { try! _ISpriteVisual2.put_Shadow(newValue) }
    }

    deinit {
        _default = nil
        _ISpriteVisual2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.stepeasingfunction)
public final class StepEasingFunction : WinAppSDK.CompositionEasingFunction {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IStepEasingFunction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIStepEasingFunction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.stepeasingfunction.finalstep)
    public var finalStep : Int32 {
        get { try! _default.get_FinalStep() }
        set { try! _default.put_FinalStep(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.stepeasingfunction.initialstep)
    public var initialStep : Int32 {
        get { try! _default.get_InitialStep() }
        set { try! _default.put_InitialStep(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.stepeasingfunction.isfinalstepsingleframe)
    public var isFinalStepSingleFrame : Bool {
        get { try! _default.get_IsFinalStepSingleFrame() }
        set { try! _default.put_IsFinalStepSingleFrame(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.stepeasingfunction.isinitialstepsingleframe)
    public var isInitialStepSingleFrame : Bool {
        get { try! _default.get_IsInitialStepSingleFrame() }
        set { try! _default.put_IsInitialStepSingleFrame(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.stepeasingfunction.stepcount)
    public var stepCount : Int32 {
        get { try! _default.get_StepCount() }
        set { try! _default.put_StepCount(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2keyframeanimation)
public final class Vector2KeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVector2KeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVector2KeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector2) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector2, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2naturalmotionanimation)
open class Vector2NaturalMotionAnimation : WinAppSDK.NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVector2NaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVector2NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVector2NaturalMotionAnimationFactory : __ABI_Microsoft_UI_Composition.IVector2NaturalMotionAnimationFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.Vector2NaturalMotionAnimation")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2naturalmotionanimation.finalvalue)
    public var finalValue : WindowsFoundation.Vector2? {
        get { try! _default.get_FinalValue() }
        set { try! _default.put_FinalValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2naturalmotionanimation.initialvalue)
    public var initialValue : WindowsFoundation.Vector2? {
        get { try! _default.get_InitialValue() }
        set { try! _default.put_InitialValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector2naturalmotionanimation.initialvelocity)
    public var initialVelocity : WindowsFoundation.Vector2 {
        get { try! _default.get_InitialVelocity() }
        set { try! _default.put_InitialVelocity(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3keyframeanimation)
public final class Vector3KeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVector3KeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVector3KeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector3) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector3, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3naturalmotionanimation)
open class Vector3NaturalMotionAnimation : WinAppSDK.NaturalMotionAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVector3NaturalMotionAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVector3NaturalMotionAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVector3NaturalMotionAnimationFactory : __ABI_Microsoft_UI_Composition.IVector3NaturalMotionAnimationFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.Vector3NaturalMotionAnimation")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3naturalmotionanimation.finalvalue)
    public var finalValue : WindowsFoundation.Vector3? {
        get { try! _default.get_FinalValue() }
        set { try! _default.put_FinalValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3naturalmotionanimation.initialvalue)
    public var initialValue : WindowsFoundation.Vector3? {
        get { try! _default.get_InitialValue() }
        set { try! _default.put_InitialValue(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector3naturalmotionanimation.initialvelocity)
    public var initialVelocity : WindowsFoundation.Vector3 {
        get { try! _default.get_InitialVelocity() }
        set { try! _default.put_InitialVelocity(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector4keyframeanimation)
public final class Vector4KeyFrameAnimation : WinAppSDK.KeyFrameAnimation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVector4KeyFrameAnimation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVector4KeyFrameAnimation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector4keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector4) throws {
        try _default.InsertKeyFrame(normalizedProgressKey, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.vector4keyframeanimation.insertkeyframe)
    public func insertKeyFrame(_ normalizedProgressKey: Float, _ value: WindowsFoundation.Vector4, _ easingFunction: CompositionEasingFunction!) throws {
        try _default.InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual)
open class Visual : WinAppSDK.CompositionObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVisual
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVisualFactory : __ABI_Microsoft_UI_Composition.IVisualFactory =  try! RoGetActivationFactory("Microsoft.UI.Composition.Visual")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.anchorpoint)
    public var anchorPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_AnchorPoint() }
        set { try! _default.put_AnchorPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.backfacevisibility)
    public var backfaceVisibility : CompositionBackfaceVisibility {
        get { try! _default.get_BackfaceVisibility() }
        set { try! _default.put_BackfaceVisibility(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.bordermode)
    public var borderMode : CompositionBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.centerpoint)
    public var centerPoint : WindowsFoundation.Vector3 {
        get { try! _default.get_CenterPoint() }
        set { try! _default.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.clip)
    public var clip : CompositionClip! {
        get { try! _default.get_Clip() }
        set { try! _default.put_Clip(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.compositemode)
    public var compositeMode : CompositionCompositeMode {
        get { try! _default.get_CompositeMode() }
        set { try! _default.put_CompositeMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisible() }
        set { try! _default.put_IsVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.offset)
    public var offset : WindowsFoundation.Vector3 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.opacity)
    public var opacity : Float {
        get { try! _default.get_Opacity() }
        set { try! _default.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.orientation)
    public var orientation : WindowsFoundation.Quaternion {
        get { try! _default.get_Orientation() }
        set { try! _default.put_Orientation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.parent)
    public var parent : ContainerVisual! {
        get { try! _default.get_Parent() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.rotationangle)
    public var rotationAngle : Float {
        get { try! _default.get_RotationAngle() }
        set { try! _default.put_RotationAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.rotationangleindegrees)
    public var rotationAngleInDegrees : Float {
        get { try! _default.get_RotationAngleInDegrees() }
        set { try! _default.put_RotationAngleInDegrees(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.rotationaxis)
    public var rotationAxis : WindowsFoundation.Vector3 {
        get { try! _default.get_RotationAxis() }
        set { try! _default.put_RotationAxis(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.scale)
    public var scale : WindowsFoundation.Vector3 {
        get { try! _default.get_Scale() }
        set { try! _default.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_Size() }
        set { try! _default.put_Size(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    private lazy var _IVisual2: __ABI_Microsoft_UI_Composition.IVisual2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.parentfortransform)
    public var parentForTransform : Visual! {
        get { try! _IVisual2.get_ParentForTransform() }
        set { try! _IVisual2.put_ParentForTransform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.relativeoffsetadjustment)
    public var relativeOffsetAdjustment : WindowsFoundation.Vector3 {
        get { try! _IVisual2.get_RelativeOffsetAdjustment() }
        set { try! _IVisual2.put_RelativeOffsetAdjustment(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.relativesizeadjustment)
    public var relativeSizeAdjustment : WindowsFoundation.Vector2 {
        get { try! _IVisual2.get_RelativeSizeAdjustment() }
        set { try! _IVisual2.put_RelativeSizeAdjustment(newValue) }
    }

    private lazy var _IVisual3: __ABI_Microsoft_UI_Composition.IVisual3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.ishittestvisible)
    public var isHitTestVisible : Bool {
        get { try! _IVisual3.get_IsHitTestVisible() }
        set { try! _IVisual3.put_IsHitTestVisible(newValue) }
    }

    private lazy var _IVisual4: __ABI_Microsoft_UI_Composition.IVisual4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visual.ispixelsnappingenabled)
    public var isPixelSnappingEnabled : Bool {
        get { try! _IVisual4.get_IsPixelSnappingEnabled() }
        set { try! _IVisual4.put_IsPixelSnappingEnabled(newValue) }
    }

    deinit {
        _default = nil
        _IVisual2 = nil
        _IVisual3 = nil
        _IVisual4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection)
public final class VisualCollection : WinAppSDK.CompositionObject, IIterable {
    public typealias T = Visual?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVisualCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVisualCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.insertabove)
    public func insertAbove(_ newChild: Visual!, _ sibling: Visual!) throws {
        try _default.InsertAbove(newChild, sibling)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.insertatbottom)
    public func insertAtBottom(_ newChild: Visual!) throws {
        try _default.InsertAtBottom(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.insertattop)
    public func insertAtTop(_ newChild: Visual!) throws {
        try _default.InsertAtTop(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.insertbelow)
    public func insertBelow(_ newChild: Visual!, _ sibling: Visual!) throws {
        try _default.InsertBelow(newChild, sibling)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.remove)
    public func remove(_ child: Visual!) throws {
        try _default.Remove(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.count)
    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    private lazy var _IIterable: IIterableVisual! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Visual?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualunorderedcollection)
public final class VisualUnorderedCollection : WinAppSDK.CompositionObject, IIterable {
    public typealias T = Visual?
    private typealias SwiftABI = __ABI_Microsoft_UI_Composition.IVisualUnorderedCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CIVisualUnorderedCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualunorderedcollection.add)
    public func add(_ newVisual: Visual!) throws {
        try _default.Add(newVisual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualunorderedcollection.remove)
    public func remove(_ visual: Visual!) throws {
        try _default.Remove(visual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualunorderedcollection.removeall)
    public func removeAll() throws {
        try _default.RemoveAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualunorderedcollection.count)
    public var count : Int32 {
        get { try! _default.get_Count() }
    }

    private lazy var _IIterable: IIterableVisual! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.visualunorderedcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Visual?>? {
        try! _IIterable.First()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ianimationobject)
public protocol IAnimationObject : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ianimationobject.populatepropertyinfo)
    func populatePropertyInfo(_ propertyName: String, _ propertyInfo: WinAppSDK.AnimationPropertyInfo!) throws
}

extension IAnimationObject {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.IAnimationObjectWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.IAnimationObjectWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimationObject = any IAnimationObject

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.icompositionanimationbase)
public protocol ICompositionAnimationBase : WinRTInterface {
}

extension ICompositionAnimationBase {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.ICompositionAnimationBaseWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.ICompositionAnimationBaseWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICompositionAnimationBase = any ICompositionAnimationBase

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.icompositionsupportssystembackdrop)
public protocol ICompositionSupportsSystemBackdrop : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.icompositionsupportssystembackdrop.systembackdrop)
    var systemBackdrop: UWP.CompositionBrush! { get set }
}

extension ICompositionSupportsSystemBackdrop {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdropWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdropWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICompositionSupportsSystemBackdrop = any ICompositionSupportsSystemBackdrop

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.icompositionsurface)
public protocol ICompositionSurface : WinRTInterface {
}

extension ICompositionSurface {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.ICompositionSurfaceWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.ICompositionSurfaceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICompositionSurface = any ICompositionSurface

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.icompositionsurfacefacade)
public protocol ICompositionSurfaceFacade : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.icompositionsurfacefacade.getrealsurface)
    func getRealSurface() throws -> WinAppSDK.AnyICompositionSurface!
}

extension ICompositionSurfaceFacade {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.ICompositionSurfaceFacadeWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.ICompositionSurfaceFacadeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICompositionSurfaceFacade = any ICompositionSurfaceFacade

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ivisualelement)
public protocol IVisualElement : WinRTInterface {
}

extension IVisualElement {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.IVisualElementWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.IVisualElementWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIVisualElement = any IVisualElement

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ivisualelement2)
public protocol IVisualElement2 : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.ivisualelement2.getvisualinternal)
    func getVisualInternal() throws -> WinAppSDK.Visual!
}

extension IVisualElement2 {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition.IVisualElement2Wrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Composition.IVisualElement2Wrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIVisualElement2 = any IVisualElement2

extension WinAppSDK.AnimationControllerProgressBehavior {
    public static var `default` : WinAppSDK.AnimationControllerProgressBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationControllerProgressBehavior_Default
    }
    public static var includesDelayTime : WinAppSDK.AnimationControllerProgressBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationControllerProgressBehavior_IncludesDelayTime
    }
}
extension WinAppSDK.AnimationControllerProgressBehavior: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.AnimationDelayBehavior {
    public static var setInitialValueAfterDelay : WinAppSDK.AnimationDelayBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDelayBehavior_SetInitialValueAfterDelay
    }
    public static var setInitialValueBeforeDelay : WinAppSDK.AnimationDelayBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDelayBehavior_SetInitialValueBeforeDelay
    }
}
extension WinAppSDK.AnimationDelayBehavior: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.AnimationDirection {
    public static var normal : WinAppSDK.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDirection_Normal
    }
    public static var reverse : WinAppSDK.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDirection_Reverse
    }
    public static var alternate : WinAppSDK.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDirection_Alternate
    }
    public static var alternateReverse : WinAppSDK.AnimationDirection {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationDirection_AlternateReverse
    }
}
extension WinAppSDK.AnimationDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.AnimationIterationBehavior {
    public static var count : WinAppSDK.AnimationIterationBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationIterationBehavior_Count
    }
    public static var forever : WinAppSDK.AnimationIterationBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationIterationBehavior_Forever
    }
}
extension WinAppSDK.AnimationIterationBehavior: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.AnimationPropertyAccessMode {
    public static var none : WinAppSDK.AnimationPropertyAccessMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationPropertyAccessMode_None
    }
    public static var readOnly : WinAppSDK.AnimationPropertyAccessMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationPropertyAccessMode_ReadOnly
    }
    public static var writeOnly : WinAppSDK.AnimationPropertyAccessMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationPropertyAccessMode_WriteOnly
    }
    public static var readWrite : WinAppSDK.AnimationPropertyAccessMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationPropertyAccessMode_ReadWrite
    }
}
extension WinAppSDK.AnimationPropertyAccessMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.AnimationStopBehavior {
    public static var leaveCurrentValue : WinAppSDK.AnimationStopBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationStopBehavior_LeaveCurrentValue
    }
    public static var setToInitialValue : WinAppSDK.AnimationStopBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationStopBehavior_SetToInitialValue
    }
    public static var setToFinalValue : WinAppSDK.AnimationStopBehavior {
        __x_ABI_CMicrosoft_CUI_CComposition_CAnimationStopBehavior_SetToFinalValue
    }
}
extension WinAppSDK.AnimationStopBehavior: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionBackfaceVisibility {
    public static var inherit : WinAppSDK.CompositionBackfaceVisibility {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBackfaceVisibility_Inherit
    }
    public static var visible : WinAppSDK.CompositionBackfaceVisibility {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBackfaceVisibility_Visible
    }
    public static var hidden : WinAppSDK.CompositionBackfaceVisibility {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBackfaceVisibility_Hidden
    }
}
extension WinAppSDK.CompositionBackfaceVisibility: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionBatchTypes {
    public static var none : WinAppSDK.CompositionBatchTypes {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBatchTypes_None
    }
    public static var animation : WinAppSDK.CompositionBatchTypes {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBatchTypes_Animation
    }
    public static var effect : WinAppSDK.CompositionBatchTypes {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBatchTypes_Effect
    }
    public static var infiniteAnimation : WinAppSDK.CompositionBatchTypes {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBatchTypes_InfiniteAnimation
    }
    public static var allAnimations : WinAppSDK.CompositionBatchTypes {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBatchTypes_AllAnimations
    }
}
extension WinAppSDK.CompositionBatchTypes: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionBitmapInterpolationMode {
    public static var nearestNeighbor : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_NearestNeighbor
    }
    public static var linear : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_Linear
    }
    public static var magLinearMinLinearMipLinear : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinLinearMipLinear
    }
    public static var magLinearMinLinearMipNearest : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinLinearMipNearest
    }
    public static var magLinearMinNearestMipLinear : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinNearestMipLinear
    }
    public static var magLinearMinNearestMipNearest : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagLinearMinNearestMipNearest
    }
    public static var magNearestMinLinearMipLinear : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinLinearMipLinear
    }
    public static var magNearestMinLinearMipNearest : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinLinearMipNearest
    }
    public static var magNearestMinNearestMipLinear : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinNearestMipLinear
    }
    public static var magNearestMinNearestMipNearest : WinAppSDK.CompositionBitmapInterpolationMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBitmapInterpolationMode_MagNearestMinNearestMipNearest
    }
}
extension WinAppSDK.CompositionBitmapInterpolationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionBorderMode {
    public static var inherit : WinAppSDK.CompositionBorderMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBorderMode_Inherit
    }
    public static var soft : WinAppSDK.CompositionBorderMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBorderMode_Soft
    }
    public static var hard : WinAppSDK.CompositionBorderMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionBorderMode_Hard
    }
}
extension WinAppSDK.CompositionBorderMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionColorSpace {
    public static var auto : WinAppSDK.CompositionColorSpace {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionColorSpace_Auto
    }
    public static var hsl : WinAppSDK.CompositionColorSpace {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionColorSpace_Hsl
    }
    public static var rgb : WinAppSDK.CompositionColorSpace {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionColorSpace_Rgb
    }
    public static var hslLinear : WinAppSDK.CompositionColorSpace {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionColorSpace_HslLinear
    }
    public static var rgbLinear : WinAppSDK.CompositionColorSpace {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionColorSpace_RgbLinear
    }
}
extension WinAppSDK.CompositionColorSpace: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionCompositeMode {
    public static var inherit : WinAppSDK.CompositionCompositeMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionCompositeMode_Inherit
    }
    public static var sourceOver : WinAppSDK.CompositionCompositeMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionCompositeMode_SourceOver
    }
    public static var destinationInvert : WinAppSDK.CompositionCompositeMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionCompositeMode_DestinationInvert
    }
    public static var minBlend : WinAppSDK.CompositionCompositeMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionCompositeMode_MinBlend
    }
}
extension WinAppSDK.CompositionCompositeMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionDropShadowSourcePolicy {
    public static var `default` : WinAppSDK.CompositionDropShadowSourcePolicy {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionDropShadowSourcePolicy_Default
    }
    public static var inheritFromVisualContent : WinAppSDK.CompositionDropShadowSourcePolicy {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionDropShadowSourcePolicy_InheritFromVisualContent
    }
}
extension WinAppSDK.CompositionDropShadowSourcePolicy: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionEasingFunctionMode {
    public static var `in` : WinAppSDK.CompositionEasingFunctionMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEasingFunctionMode_In
    }
    public static var out : WinAppSDK.CompositionEasingFunctionMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEasingFunctionMode_Out
    }
    public static var inOut : WinAppSDK.CompositionEasingFunctionMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEasingFunctionMode_InOut
    }
}
extension WinAppSDK.CompositionEasingFunctionMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionEffectFactoryLoadStatus {
    public static var success : WinAppSDK.CompositionEffectFactoryLoadStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEffectFactoryLoadStatus_Success
    }
    public static var effectTooComplex : WinAppSDK.CompositionEffectFactoryLoadStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEffectFactoryLoadStatus_EffectTooComplex
    }
    public static var pending : WinAppSDK.CompositionEffectFactoryLoadStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEffectFactoryLoadStatus_Pending
    }
    public static var other : WinAppSDK.CompositionEffectFactoryLoadStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionEffectFactoryLoadStatus_Other
    }
}
extension WinAppSDK.CompositionEffectFactoryLoadStatus: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionGetValueStatus {
    public static var succeeded : WinAppSDK.CompositionGetValueStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGetValueStatus_Succeeded
    }
    public static var typeMismatch : WinAppSDK.CompositionGetValueStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGetValueStatus_TypeMismatch
    }
    public static var notFound : WinAppSDK.CompositionGetValueStatus {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGetValueStatus_NotFound
    }
}
extension WinAppSDK.CompositionGetValueStatus: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionGradientExtendMode {
    public static var clamp : WinAppSDK.CompositionGradientExtendMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGradientExtendMode_Clamp
    }
    public static var wrap : WinAppSDK.CompositionGradientExtendMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGradientExtendMode_Wrap
    }
    public static var mirror : WinAppSDK.CompositionGradientExtendMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionGradientExtendMode_Mirror
    }
}
extension WinAppSDK.CompositionGradientExtendMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionMappingMode {
    public static var absolute : WinAppSDK.CompositionMappingMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionMappingMode_Absolute
    }
    public static var relative : WinAppSDK.CompositionMappingMode {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionMappingMode_Relative
    }
}
extension WinAppSDK.CompositionMappingMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionStretch {
    public static var none : WinAppSDK.CompositionStretch {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStretch_None
    }
    public static var fill : WinAppSDK.CompositionStretch {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStretch_Fill
    }
    public static var uniform : WinAppSDK.CompositionStretch {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStretch_Uniform
    }
    public static var uniformToFill : WinAppSDK.CompositionStretch {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStretch_UniformToFill
    }
}
extension WinAppSDK.CompositionStretch: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionStrokeCap {
    public static var flat : WinAppSDK.CompositionStrokeCap {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeCap_Flat
    }
    public static var square : WinAppSDK.CompositionStrokeCap {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeCap_Square
    }
    public static var round : WinAppSDK.CompositionStrokeCap {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeCap_Round
    }
    public static var triangle : WinAppSDK.CompositionStrokeCap {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeCap_Triangle
    }
}
extension WinAppSDK.CompositionStrokeCap: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.CompositionStrokeLineJoin {
    public static var miter : WinAppSDK.CompositionStrokeLineJoin {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeLineJoin_Miter
    }
    public static var bevel : WinAppSDK.CompositionStrokeLineJoin {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeLineJoin_Bevel
    }
    public static var round : WinAppSDK.CompositionStrokeLineJoin {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeLineJoin_Round
    }
    public static var miterOrBevel : WinAppSDK.CompositionStrokeLineJoin {
        __x_ABI_CMicrosoft_CUI_CComposition_CCompositionStrokeLineJoin_MiterOrBevel
    }
}
extension WinAppSDK.CompositionStrokeLineJoin: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

