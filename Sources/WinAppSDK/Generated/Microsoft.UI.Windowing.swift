// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowpresenterkind)
public typealias AppWindowPresenterKind = __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareafallback)
public typealias DisplayAreaFallback = __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcherstatus)
public typealias DisplayAreaWatcherStatus = __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.iconshowoptions)
public typealias IconShowOptions = __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenterstate)
public typealias OverlappedPresenterState = __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.titlebarheightoption)
public typealias TitleBarHeightOption = __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.titlebartheme)
public typealias TitleBarTheme = __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarTheme
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow)
public final class AppWindow : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAppWindowStatics: __ABI_Microsoft_UI_Windowing.IAppWindowStatics = try! RoGetActivationFactory("Microsoft.UI.Windowing.AppWindow")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create() throws -> AppWindow! {
        return try _IAppWindowStatics.Create()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create(_ appWindowPresenter: AppWindowPresenter!) throws -> AppWindow! {
        return try _IAppWindowStatics.CreateWithPresenter(appWindowPresenter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create(_ appWindowPresenter: AppWindowPresenter!, _ ownerWindowId: WinAppSDK.WindowId) throws -> AppWindow! {
        return try _IAppWindowStatics.CreateWithPresenterAndOwner(appWindowPresenter, ownerWindowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.getfromwindowid)
    public static func getFromWindowId(_ windowId: WinAppSDK.WindowId) throws -> AppWindow! {
        return try _IAppWindowStatics.GetFromWindowId(windowId)
    }

    private static let _IAppWindowStatics2: __ABI_Microsoft_UI_Windowing.IAppWindowStatics2 = try! RoGetActivationFactory("Microsoft.UI.Windowing.AppWindow")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.create)
    public static func create(_ appWindowPresenter: AppWindowPresenter!, _ ownerWindowId: WinAppSDK.WindowId, _ DispatcherQueue: WinAppSDK.DispatcherQueue!) throws -> AppWindow! {
        return try _IAppWindowStatics2.CreateWithDispatcherQueue(appWindowPresenter, ownerWindowId, DispatcherQueue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.destroy)
    public func destroy() throws {
        try _default.Destroy()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.hide)
    public func hide() throws {
        try _default.Hide()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.move)
    public func move(_ position: UWP.PointInt32) throws {
        try _default.Move(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveandresize)
    public func moveAndResize(_ rect: UWP.RectInt32) throws {
        try _default.MoveAndResize(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveandresize)
    public func moveAndResize(_ rect: UWP.RectInt32, _ displayarea: DisplayArea!) throws {
        try _default.MoveAndResizeRelativeToDisplayArea(rect, displayarea)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.resize)
    public func resize(_ size: UWP.SizeInt32) throws {
        try _default.Resize(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.seticon)
    public func setIcon(_ iconPath: String) throws {
        try _default.SetIcon(iconPath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.seticon)
    public func setIcon(_ iconId: WinAppSDK.IconId) throws {
        try _default.SetIconWithIconId(iconId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.setpresenter)
    public func setPresenter(_ appWindowPresenter: AppWindowPresenter!) throws {
        try _default.SetPresenter(appWindowPresenter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.setpresenter)
    public func setPresenter(_ appWindowPresenterKind: AppWindowPresenterKind) throws {
        try _default.SetPresenterByKind(appWindowPresenterKind)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.show)
    public func show() throws {
        try _default.Show()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.show)
    public func show(_ activateWindow: Bool) throws {
        try _default.ShowWithActivation(activateWindow)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.id)
    public var id : WinAppSDK.WindowId {
        get { try! _default.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.isshowninswitchers)
    public var isShownInSwitchers : Bool {
        get { try! _default.get_IsShownInSwitchers() }
        set { try! _default.put_IsShownInSwitchers(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.ownerwindowid)
    public var ownerWindowId : WinAppSDK.WindowId {
        get { try! _default.get_OwnerWindowId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.position)
    public var position : UWP.PointInt32 {
        get { try! _default.get_Position() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.presenter)
    public var presenter : AppWindowPresenter! {
        get { try! _default.get_Presenter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.size)
    public var size : UWP.SizeInt32 {
        get { try! _default.get_Size() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.title)
    public var title : String {
        get { try! _default.get_Title() }
        set { try! _default.put_Title(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.titlebar)
    public var titleBar : AppWindowTitleBar! {
        get { try! _default.get_TitleBar() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.changed)
    public lazy var changed : Event<TypedEventHandler<AppWindow?, AppWindowChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Changed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Changed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.closing)
    public lazy var closing : Event<TypedEventHandler<AppWindow?, AppWindowClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closing($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closing($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.destroying)
    public lazy var destroying : Event<TypedEventHandler<AppWindow?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Destroying($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Destroying($0)
       }
      )
    }()

    private lazy var _IAppWindow2: __ABI_Microsoft_UI_Windowing.IAppWindow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveinzorderatbottom)
    public func moveInZOrderAtBottom() throws {
        try _IAppWindow2.MoveInZOrderAtBottom()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveinzorderattop)
    public func moveInZOrderAtTop() throws {
        try _IAppWindow2.MoveInZOrderAtTop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.moveinzorderbelow)
    public func moveInZOrderBelow(_ windowId: WinAppSDK.WindowId) throws {
        try _IAppWindow2.MoveInZOrderBelow(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.resizeclient)
    public func resizeClient(_ size: UWP.SizeInt32) throws {
        try _IAppWindow2.ResizeClient(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.showoncewithrequestedstartupstate)
    public func showOnceWithRequestedStartupState() throws {
        try _IAppWindow2.ShowOnceWithRequestedStartupState()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.clientsize)
    public var clientSize : UWP.SizeInt32 {
        get { try! _IAppWindow2.get_ClientSize() }
    }

    private lazy var _IAppWindow3: __ABI_Microsoft_UI_Windowing.IAppWindow3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.associatewithdispatcherqueue)
    public func associateWithDispatcherQueue(_ dispatcherQueue: WinAppSDK.DispatcherQueue!) throws {
        try _IAppWindow3.AssociateWithDispatcherQueue(dispatcherQueue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _IAppWindow3.get_DispatcherQueue() }
    }

    private lazy var _IAppWindow4: __ABI_Microsoft_UI_Windowing.IAppWindow4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.settaskbaricon)
    public func setTaskbarIcon(_ iconPath: String) throws {
        try _IAppWindow4.SetTaskbarIcon(iconPath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.settaskbaricon)
    public func setTaskbarIcon(_ iconId: WinAppSDK.IconId) throws {
        try _IAppWindow4.SetTaskbarIconWithIconId(iconId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.settitlebaricon)
    public func setTitleBarIcon(_ iconPath: String) throws {
        try _IAppWindow4.SetTitleBarIcon(iconPath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindow.settitlebaricon)
    public func setTitleBarIcon(_ iconId: WinAppSDK.IconId) throws {
        try _IAppWindow4.SetTitleBarIconWithIconId(iconId)
    }

    deinit {
        _default = nil
        _IAppWindow2 = nil
        _IAppWindow3 = nil
        _IAppWindow4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs)
public final class AppWindowChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didpositionchange)
    public var didPositionChange : Bool {
        get { try! _default.get_DidPositionChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didpresenterchange)
    public var didPresenterChange : Bool {
        get { try! _default.get_DidPresenterChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didsizechange)
    public var didSizeChange : Bool {
        get { try! _default.get_DidSizeChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didvisibilitychange)
    public var didVisibilityChange : Bool {
        get { try! _default.get_DidVisibilityChange() }
    }

    private lazy var _IAppWindowChangedEventArgs2: __ABI_Microsoft_UI_Windowing.IAppWindowChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.didzorderchange)
    public var didZOrderChange : Bool {
        get { try! _IAppWindowChangedEventArgs2.get_DidZOrderChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.iszorderatbottom)
    public var isZOrderAtBottom : Bool {
        get { try! _IAppWindowChangedEventArgs2.get_IsZOrderAtBottom() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.iszorderattop)
    public var isZOrderAtTop : Bool {
        get { try! _IAppWindowChangedEventArgs2.get_IsZOrderAtTop() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowchangedeventargs.zorderbelowwindowid)
    public var zorderBelowWindowId : WinAppSDK.WindowId {
        get { try! _IAppWindowChangedEventArgs2.get_ZOrderBelowWindowId() }
    }

    deinit {
        _default = nil
        _IAppWindowChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowclosingeventargs)
public final class AppWindowClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_Cancel() }
        set { try! _default.put_Cancel(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowpresenter)
open class AppWindowPresenter : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAppWindowPresenterFactory : __ABI_Microsoft_UI_Windowing.IAppWindowPresenterFactory =  try! RoGetActivationFactory("Microsoft.UI.Windowing.AppWindowPresenter")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowpresenter.kind)
    public var kind : AppWindowPresenterKind {
        get { try! _default.get_Kind() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar)
public final class AppWindowTitleBar : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IAppWindowTitleBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAppWindowTitleBarStatics: __ABI_Microsoft_UI_Windowing.IAppWindowTitleBarStatics = try! RoGetActivationFactory("Microsoft.UI.Windowing.AppWindowTitleBar")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.iscustomizationsupported)
    public static func isCustomizationSupported() throws -> Bool {
        return try _IAppWindowTitleBarStatics.IsCustomizationSupported()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.resettodefault)
    public func resetToDefault() throws {
        try _default.ResetToDefault()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.setdragrectangles)
    public func setDragRectangles(_ value: [UWP.RectInt32]) throws {
        try _default.SetDragRectangles(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.backgroundcolor)
    public var backgroundColor : UWP.Color? {
        get { try! _default.get_BackgroundColor() }
        set { try! _default.put_BackgroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonbackgroundcolor)
    public var buttonBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonBackgroundColor() }
        set { try! _default.put_ButtonBackgroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonforegroundcolor)
    public var buttonForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonForegroundColor() }
        set { try! _default.put_ButtonForegroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonhoverbackgroundcolor)
    public var buttonHoverBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonHoverBackgroundColor() }
        set { try! _default.put_ButtonHoverBackgroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonhoverforegroundcolor)
    public var buttonHoverForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonHoverForegroundColor() }
        set { try! _default.put_ButtonHoverForegroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttoninactivebackgroundcolor)
    public var buttonInactiveBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonInactiveBackgroundColor() }
        set { try! _default.put_ButtonInactiveBackgroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttoninactiveforegroundcolor)
    public var buttonInactiveForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonInactiveForegroundColor() }
        set { try! _default.put_ButtonInactiveForegroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonpressedbackgroundcolor)
    public var buttonPressedBackgroundColor : UWP.Color? {
        get { try! _default.get_ButtonPressedBackgroundColor() }
        set { try! _default.put_ButtonPressedBackgroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.buttonpressedforegroundcolor)
    public var buttonPressedForegroundColor : UWP.Color? {
        get { try! _default.get_ButtonPressedForegroundColor() }
        set { try! _default.put_ButtonPressedForegroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.extendscontentintotitlebar)
    public var extendsContentIntoTitleBar : Bool {
        get { try! _default.get_ExtendsContentIntoTitleBar() }
        set { try! _default.put_ExtendsContentIntoTitleBar(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.foregroundcolor)
    public var foregroundColor : UWP.Color? {
        get { try! _default.get_ForegroundColor() }
        set { try! _default.put_ForegroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.height)
    public var height : Int32 {
        get { try! _default.get_Height() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.iconshowoptions)
    public var iconShowOptions : IconShowOptions {
        get { try! _default.get_IconShowOptions() }
        set { try! _default.put_IconShowOptions(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.inactivebackgroundcolor)
    public var inactiveBackgroundColor : UWP.Color? {
        get { try! _default.get_InactiveBackgroundColor() }
        set { try! _default.put_InactiveBackgroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.inactiveforegroundcolor)
    public var inactiveForegroundColor : UWP.Color? {
        get { try! _default.get_InactiveForegroundColor() }
        set { try! _default.put_InactiveForegroundColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.leftinset)
    public var leftInset : Int32 {
        get { try! _default.get_LeftInset() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.rightinset)
    public var rightInset : Int32 {
        get { try! _default.get_RightInset() }
    }

    private lazy var _IAppWindowTitleBar2: __ABI_Microsoft_UI_Windowing.IAppWindowTitleBar2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.preferredheightoption)
    public var preferredHeightOption : TitleBarHeightOption {
        get { try! _IAppWindowTitleBar2.get_PreferredHeightOption() }
        set { try! _IAppWindowTitleBar2.put_PreferredHeightOption(newValue) }
    }

    private lazy var _IAppWindowTitleBar3: __ABI_Microsoft_UI_Windowing.IAppWindowTitleBar3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar.preferredtheme)
    public var preferredTheme : TitleBarTheme {
        get { try! _IAppWindowTitleBar3.get_PreferredTheme() }
        set { try! _IAppWindowTitleBar3.put_PreferredTheme(newValue) }
    }

    deinit {
        _default = nil
        _IAppWindowTitleBar2 = nil
        _IAppWindowTitleBar3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea)
public final class DisplayArea : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IDisplayArea
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IDisplayAreaStatics: __ABI_Microsoft_UI_Windowing.IDisplayAreaStatics = try! RoGetActivationFactory("Microsoft.UI.Windowing.DisplayArea")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.createwatcher)
    public static func createWatcher() throws -> DisplayAreaWatcher! {
        return try _IDisplayAreaStatics.CreateWatcher()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.findall)
    public static func findAll() throws -> WindowsFoundation.AnyIVectorView<DisplayArea?>! {
        return try _IDisplayAreaStatics.FindAll()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfromwindowid)
    public static func getFromWindowId(_ windowId: WinAppSDK.WindowId, _ displayAreaFallback: DisplayAreaFallback) throws -> DisplayArea! {
        return try _IDisplayAreaStatics.GetFromWindowId(windowId, displayAreaFallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfrompoint)
    public static func getFromPoint(_ point: UWP.PointInt32, _ displayAreaFallback: DisplayAreaFallback) throws -> DisplayArea! {
        return try _IDisplayAreaStatics.GetFromPoint(point, displayAreaFallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfromrect)
    public static func getFromRect(_ rect: UWP.RectInt32, _ displayAreaFallback: DisplayAreaFallback) throws -> DisplayArea! {
        return try _IDisplayAreaStatics.GetFromRect(rect, displayAreaFallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.primary)
    public static var primary : DisplayArea! {
        get { try! _IDisplayAreaStatics.get_Primary() }
    }

    private static let _IDisplayAreaStatics2: __ABI_Microsoft_UI_Windowing.IDisplayAreaStatics2 = try! RoGetActivationFactory("Microsoft.UI.Windowing.DisplayArea")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.getfromdisplayid)
    public static func getFromDisplayId(_ displayId: WinAppSDK.DisplayId) throws -> DisplayArea! {
        return try _IDisplayAreaStatics2.GetFromDisplayId(displayId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.displayid)
    public var displayId : WinAppSDK.DisplayId {
        get { try! _default.get_DisplayId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.isprimary)
    public var isPrimary : Bool {
        get { try! _default.get_IsPrimary() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.outerbounds)
    public var outerBounds : UWP.RectInt32 {
        get { try! _default.get_OuterBounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayarea.workarea)
    public var workArea : UWP.RectInt32 {
        get { try! _default.get_WorkArea() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher)
public final class DisplayAreaWatcher : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IDisplayAreaWatcher
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.start)
    public func start() throws {
        try _default.Start()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.stop)
    public func stop() throws {
        try _default.Stop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.status)
    public var status : DisplayAreaWatcherStatus {
        get { try! _default.get_Status() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.added)
    public lazy var added : Event<TypedEventHandler<DisplayAreaWatcher?, DisplayArea?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Added($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Added($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.enumerationcompleted)
    public lazy var enumerationCompleted : Event<TypedEventHandler<DisplayAreaWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EnumerationCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EnumerationCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.removed)
    public lazy var removed : Event<TypedEventHandler<DisplayAreaWatcher?, DisplayArea?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Removed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Removed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.stopped)
    public lazy var stopped : Event<TypedEventHandler<DisplayAreaWatcher?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Stopped($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Stopped($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.displayareawatcher.updated)
    public lazy var updated : Event<TypedEventHandler<DisplayAreaWatcher?, DisplayArea?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Updated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Updated($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.fullscreenpresenter)
public final class FullScreenPresenter : WinAppSDK.AppWindowPresenter {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IFullScreenPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IFullScreenPresenterStatics: __ABI_Microsoft_UI_Windowing.IFullScreenPresenterStatics = try! RoGetActivationFactory("Microsoft.UI.Windowing.FullScreenPresenter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.fullscreenpresenter.create)
    public static func create() throws -> FullScreenPresenter! {
        return try _IFullScreenPresenterStatics.Create()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter)
public final class OverlappedPresenter : WinAppSDK.AppWindowPresenter {
    private typealias SwiftABI = __ABI_Microsoft_UI_Windowing.IOverlappedPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IOverlappedPresenterStatics: __ABI_Microsoft_UI_Windowing.IOverlappedPresenterStatics = try! RoGetActivationFactory("Microsoft.UI.Windowing.OverlappedPresenter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.create)
    public static func create() throws -> OverlappedPresenter! {
        return try _IOverlappedPresenterStatics.Create()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.createforcontextmenu)
    public static func createForContextMenu() throws -> OverlappedPresenter! {
        return try _IOverlappedPresenterStatics.CreateForContextMenu()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.createfordialog)
    public static func createForDialog() throws -> OverlappedPresenter! {
        return try _IOverlappedPresenterStatics.CreateForDialog()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.createfortoolwindow)
    public static func createForToolWindow() throws -> OverlappedPresenter! {
        return try _IOverlappedPresenterStatics.CreateForToolWindow()
    }

    private static let _IOverlappedPresenterStatics2: __ABI_Microsoft_UI_Windowing.IOverlappedPresenterStatics2 = try! RoGetActivationFactory("Microsoft.UI.Windowing.OverlappedPresenter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.requestedstartupstate)
    public static var requestedStartupState : OverlappedPresenterState {
        get { try! _IOverlappedPresenterStatics2.get_RequestedStartupState() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.maximize)
    public func maximize() throws {
        try _default.Maximize()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.minimize)
    public func minimize() throws {
        try _default.Minimize()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.restore)
    public func restore() throws {
        try _default.Restore()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.setborderandtitlebar)
    public func setBorderAndTitleBar(_ hasBorder: Bool, _ hasTitleBar: Bool) throws {
        try _default.SetBorderAndTitleBar(hasBorder, hasTitleBar)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.hasborder)
    public var hasBorder : Bool {
        get { try! _default.get_HasBorder() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.hastitlebar)
    public var hasTitleBar : Bool {
        get { try! _default.get_HasTitleBar() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.isalwaysontop)
    public var isAlwaysOnTop : Bool {
        get { try! _default.get_IsAlwaysOnTop() }
        set { try! _default.put_IsAlwaysOnTop(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.ismaximizable)
    public var isMaximizable : Bool {
        get { try! _default.get_IsMaximizable() }
        set { try! _default.put_IsMaximizable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.isminimizable)
    public var isMinimizable : Bool {
        get { try! _default.get_IsMinimizable() }
        set { try! _default.put_IsMinimizable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.ismodal)
    public var isModal : Bool {
        get { try! _default.get_IsModal() }
        set { try! _default.put_IsModal(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.isresizable)
    public var isResizable : Bool {
        get { try! _default.get_IsResizable() }
        set { try! _default.put_IsResizable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.state)
    public var state : OverlappedPresenterState {
        get { try! _default.get_State() }
    }

    private lazy var _IOverlappedPresenter2: __ABI_Microsoft_UI_Windowing.IOverlappedPresenter2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.minimize)
    public func minimize(_ activateWindow: Bool) throws {
        try _IOverlappedPresenter2.MinimizeWithActivation(activateWindow)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.restore)
    public func restore(_ activateWindow: Bool) throws {
        try _IOverlappedPresenter2.RestoreWithActivation(activateWindow)
    }

    private lazy var _IOverlappedPresenter3: __ABI_Microsoft_UI_Windowing.IOverlappedPresenter3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.preferredmaximumheight)
    public var preferredMaximumHeight : Int32? {
        get { try! _IOverlappedPresenter3.get_PreferredMaximumHeight() }
        set { try! _IOverlappedPresenter3.put_PreferredMaximumHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.preferredmaximumwidth)
    public var preferredMaximumWidth : Int32? {
        get { try! _IOverlappedPresenter3.get_PreferredMaximumWidth() }
        set { try! _IOverlappedPresenter3.put_PreferredMaximumWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.preferredminimumheight)
    public var preferredMinimumHeight : Int32? {
        get { try! _IOverlappedPresenter3.get_PreferredMinimumHeight() }
        set { try! _IOverlappedPresenter3.put_PreferredMinimumHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.overlappedpresenter.preferredminimumwidth)
    public var preferredMinimumWidth : Int32? {
        get { try! _IOverlappedPresenter3.get_PreferredMinimumWidth() }
        set { try! _IOverlappedPresenter3.put_PreferredMinimumWidth(newValue) }
    }

    deinit {
        _default = nil
        _IOverlappedPresenter2 = nil
        _IOverlappedPresenter3 = nil
    }
}

extension WinAppSDK.AppWindowPresenterKind {
    public static var `default` : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_Default
    }
    public static var compactOverlay : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_CompactOverlay
    }
    public static var fullScreen : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_FullScreen
    }
    public static var overlapped : WinAppSDK.AppWindowPresenterKind {
        __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind_Overlapped
    }
}
extension WinAppSDK.AppWindowPresenterKind: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.DisplayAreaFallback {
    public static var none : WinAppSDK.DisplayAreaFallback {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback_None
    }
    public static var primary : WinAppSDK.DisplayAreaFallback {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback_Primary
    }
    public static var nearest : WinAppSDK.DisplayAreaFallback {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaFallback_Nearest
    }
}
extension WinAppSDK.DisplayAreaFallback: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.DisplayAreaWatcherStatus {
    public static var created : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Created
    }
    public static var started : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Started
    }
    public static var enumerationCompleted : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_EnumerationCompleted
    }
    public static var stopping : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Stopping
    }
    public static var stopped : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Stopped
    }
    public static var aborted : WinAppSDK.DisplayAreaWatcherStatus {
        __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus_Aborted
    }
}
extension WinAppSDK.DisplayAreaWatcherStatus: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.IconShowOptions {
    public static var showIconAndSystemMenu : WinAppSDK.IconShowOptions {
        __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions_ShowIconAndSystemMenu
    }
    public static var hideIconAndSystemMenu : WinAppSDK.IconShowOptions {
        __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions_HideIconAndSystemMenu
    }
}
extension WinAppSDK.IconShowOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.OverlappedPresenterState {
    public static var maximized : WinAppSDK.OverlappedPresenterState {
        __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState_Maximized
    }
    public static var minimized : WinAppSDK.OverlappedPresenterState {
        __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState_Minimized
    }
    public static var restored : WinAppSDK.OverlappedPresenterState {
        __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState_Restored
    }
}
extension WinAppSDK.OverlappedPresenterState: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.TitleBarHeightOption {
    public static var standard : WinAppSDK.TitleBarHeightOption {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption_Standard
    }
    public static var tall : WinAppSDK.TitleBarHeightOption {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption_Tall
    }
    public static var collapsed : WinAppSDK.TitleBarHeightOption {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption_Collapsed
    }
}
extension WinAppSDK.TitleBarHeightOption: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.TitleBarTheme {
    public static var legacy : WinAppSDK.TitleBarTheme {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarTheme_Legacy
    }
    public static var useDefaultAppMode : WinAppSDK.TitleBarTheme {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarTheme_UseDefaultAppMode
    }
    public static var light : WinAppSDK.TitleBarTheme {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarTheme_Light
    }
    public static var dark : WinAppSDK.TitleBarTheme {
        __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarTheme_Dark
    }
}
extension WinAppSDK.TitleBarTheme: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

