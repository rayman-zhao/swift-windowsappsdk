// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentautomationoptions)
public typealias ContentAutomationOptions = __x_ABI_CMicrosoft_CUI_CContent_CContentAutomationOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateroundingmode)
public typealias ContentCoordinateRoundingMode = __x_ABI_CMicrosoft_CUI_CContent_CContentCoordinateRoundingMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentlayoutdirection)
public typealias ContentLayoutDirection = __x_ABI_CMicrosoft_CUI_CContent_CContentLayoutDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsizepolicy)
public typealias ContentSizePolicy = __x_ABI_CMicrosoft_CUI_CContent_CContentSizePolicy
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink)
public final class ChildSiteLink : WinRTClass, WindowsFoundation.IClosable, WinAppSDK.IClosableNotifier, IContentSiteAutomation, IContentSiteInput, IContentSiteLink {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IChildSiteLink
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIChildSiteLink
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IChildSiteLinkStatics: __ABI_Microsoft_UI_Content.IChildSiteLinkStatics = try! RoGetActivationFactory("Microsoft.UI.Content.ChildSiteLink")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.create)
    public static func create(_ parent: ContentIsland!, _ placementVisual: WinAppSDK.ContainerVisual!) throws -> ChildSiteLink! {
        return try _IChildSiteLinkStatics.Create(parent, placementVisual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.createforsystemvisual)
    public static func createForSystemVisual(_ parent: ContentIsland!, _ placementVisual: UWP.ContainerVisual!) throws -> ChildSiteLink! {
        return try _IChildSiteLinkStatics.CreateForSystemVisual(parent, placementVisual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.connect)
    public func connect(_ content: ContentIsland!) throws {
        try _default.Connect(content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.actualsize)
    public var actualSize : WindowsFoundation.Vector2 {
        get { try! _default.get_ActualSize() }
        set { try! _default.put_ActualSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.localtoparenttransformmatrix)
    public var localToParentTransformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _default.get_LocalToParentTransformMatrix() }
        set { try! _default.put_LocalToParentTransformMatrix(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.siteview)
    public var siteView : ContentSiteView! {
        get { try! _default.get_SiteView() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _IClosableNotifier: __ABI_Microsoft_UI.IClosableNotifier! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.isclosed)
    public var isClosed : Bool {
        get { try! _IClosableNotifier.get_IsClosed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.closed)
    public lazy var closed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.frameworkclosed)
    public lazy var frameworkClosed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_FrameworkClosed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_FrameworkClosed($0)
       }
      )
    }()

    private lazy var _IContentSiteAutomation: __ABI_Microsoft_UI_Content.IContentSiteAutomation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.automationoption)
    public var automationOption : ContentAutomationOptions {
        get { try! _IContentSiteAutomation.get_AutomationOption() }
        set { try! _IContentSiteAutomation.put_AutomationOption(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.automationprovider)
    public var automationProvider : Any! {
        get { try! _IContentSiteAutomation.get_AutomationProvider() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.fragmentrootautomationproviderrequested)
    public lazy var fragmentRootAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_FragmentRootAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_FragmentRootAutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.nextsiblingautomationproviderrequested)
    public lazy var nextSiblingAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_NextSiblingAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_NextSiblingAutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.parentautomationproviderrequested)
    public lazy var parentAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_ParentAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_ParentAutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.previoussiblingautomationproviderrequested)
    public lazy var previousSiblingAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_PreviousSiblingAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_PreviousSiblingAutomationProviderRequested($0)
       }
      )
    }()

    private lazy var _IContentSiteInput: __ABI_Microsoft_UI_Content.IContentSiteInput! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.processeskeyboardinput)
    public var processesKeyboardInput : Bool {
        get { try! _IContentSiteInput.get_ProcessesKeyboardInput() }
        set { try! _IContentSiteInput.put_ProcessesKeyboardInput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.processespointerinput)
    public var processesPointerInput : Bool {
        get { try! _IContentSiteInput.get_ProcessesPointerInput() }
        set { try! _IContentSiteInput.put_ProcessesPointerInput(newValue) }
    }

    private lazy var _IContentSiteLink: __ABI_Microsoft_UI_Content.IContentSiteLink! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.childsitelink.parent)
    public var parent : ContentIsland! {
        get { try! _IContentSiteLink.get_Parent() }
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IClosableNotifier = nil
        _IContentSiteAutomation = nil
        _IContentSiteInput = nil
        _IContentSiteLink = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter)
open class ContentCoordinateConverter : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentCoordinateConverter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentCoordinateConverter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentCoordinateConverterFactory : __ABI_Microsoft_UI_Content.IContentCoordinateConverterFactory =  try! RoGetActivationFactory("Microsoft.UI.Content.ContentCoordinateConverter")

    private static let _IContentCoordinateConverterStatics: __ABI_Microsoft_UI_Content.IContentCoordinateConverterStatics = try! RoGetActivationFactory("Microsoft.UI.Content.ContentCoordinateConverter")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.createforwindowid)
    public class func createForWindowId(_ windowId: WinAppSDK.WindowId) throws -> ContentCoordinateConverter! {
        return try _IContentCoordinateConverterStatics.CreateForWindowId(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertlocaltoscreen)
    public func convertLocalToScreen(_ localPoint: WindowsFoundation.Point) throws -> UWP.PointInt32 {
        try _default.ConvertLocalToScreenWithPoint(localPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertlocaltoscreen)
    public func convertLocalToScreen(_ localPoints: [WindowsFoundation.Point]) throws -> [UWP.PointInt32] {
        try _default.ConvertLocalToScreenWithPoints(localPoints)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertlocaltoscreen)
    public func convertLocalToScreen(_ localPoints: [WindowsFoundation.Point], _ roundingMode: ContentCoordinateRoundingMode) throws -> [UWP.PointInt32] {
        try _default.ConvertLocalToScreenWithPointsAndRoundingMode(localPoints, roundingMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertlocaltoscreen)
    public func convertLocalToScreen(_ localRect: WindowsFoundation.Rect) throws -> UWP.RectInt32 {
        try _default.ConvertLocalToScreenWithRect(localRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertscreentolocal)
    public func convertScreenToLocal(_ screenPoint: UWP.PointInt32) throws -> WindowsFoundation.Point {
        try _default.ConvertScreenToLocalWithPoint(screenPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertscreentolocal)
    public func convertScreenToLocal(_ screenPoints: [UWP.PointInt32]) throws -> [WindowsFoundation.Point] {
        try _default.ConvertScreenToLocalWithPoints(screenPoints)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentcoordinateconverter.convertscreentolocal)
    public func convertScreenToLocal(_ screenRect: UWP.RectInt32) throws -> WindowsFoundation.Rect {
        try _default.ConvertScreenToLocalWithRect(screenRect)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentdeferral)
public final class ContentDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentdeferral.complete)
    public func complete() throws {
        try _default.Complete()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentenvironmentsettingchangedeventargs)
public final class ContentEnvironmentSettingChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentEnvironmentSettingChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentEnvironmentSettingChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentenvironmentsettingchangedeventargs.settingname)
    public var settingName : String {
        get { try! _default.get_SettingName() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentenvironmentstatechangedeventargs)
public final class ContentEnvironmentStateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentEnvironmentStateChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentEnvironmentStateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentenvironmentstatechangedeventargs.didappwindowidchange)
    public var didAppWindowIdChange : Bool {
        get { try! _default.get_DidAppWindowIdChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentenvironmentstatechangedeventargs.diddisplayidchange)
    public var didDisplayIdChange : Bool {
        get { try! _default.get_DidDisplayIdChange() }
    }

    private lazy var _IContentEnvironmentStateChangedEventArgs2: __ABI_Microsoft_UI_Content.IContentEnvironmentStateChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentenvironmentstatechangedeventargs.diddisplayscalechange)
    public var didDisplayScaleChange : Bool {
        get { try! _IContentEnvironmentStateChangedEventArgs2.get_DidDisplayScaleChange() }
    }

    deinit {
        _default = nil
        _IContentEnvironmentStateChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland)
open class ContentIsland : WinRTClass, WindowsFoundation.IClosable, WinAppSDK.IClosableNotifier, WinAppSDK.ICompositionSupportsSystemBackdrop {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentIsland
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentIsland
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentIslandFactory : __ABI_Microsoft_UI_Content.IContentIslandFactory =  try! RoGetActivationFactory("Microsoft.UI.Content.ContentIsland")

    private static let _IContentIslandStatics: __ABI_Microsoft_UI_Content.IContentIslandStatics = try! RoGetActivationFactory("Microsoft.UI.Content.ContentIsland")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.create)
    public class func create(_ Root: WinAppSDK.Visual!) throws -> ContentIsland! {
        return try _IContentIslandStatics.Create(Root)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.findallforcompositor)
    public class func findAllForCompositor(_ compositor: WinAppSDK.Compositor!) throws -> [ContentIsland?] {
        return try _IContentIslandStatics.FindAllForCompositor(compositor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.findallforcurrentthread)
    public class func findAllForCurrentThread() throws -> [ContentIsland?] {
        return try _IContentIslandStatics.FindAllForCurrentThread()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.getbyvisual)
    public class func getByVisual(_ child: WinAppSDK.Visual!) throws -> ContentIsland! {
        return try _IContentIslandStatics.GetByVisual(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.getfromid)
    public class func getFromId(_ id: UInt64) throws -> ContentIsland! {
        return try _IContentIslandStatics.GetFromId(id)
    }

    private static let _IContentIslandStatics2: __ABI_Microsoft_UI_Content.IContentIslandStatics2 = try! RoGetActivationFactory("Microsoft.UI.Content.ContentIsland")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.createforsystemvisual)
    public class func createForSystemVisual(_ queue: WinAppSDK.DispatcherQueue!, _ root: UWP.Visual!) throws -> ContentIsland! {
        return try _IContentIslandStatics2.CreateForSystemVisual(queue, root)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.findallforsystemcompositor)
    public class func findAllForSystemCompositor(_ compositor: UWP.Compositor!) throws -> [ContentIsland?] {
        return try _IContentIslandStatics2.FindAllForSystemCompositor(compositor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.getbysystemvisual)
    public class func getBySystemVisual(_ child: UWP.Visual!) throws -> ContentIsland! {
        return try _IContentIslandStatics2.GetBySystemVisual(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.getautomationhostprovider)
    public func getAutomationHostProvider() throws -> Any! {
        try _default.GetAutomationHostProvider()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.getstatechangedeferral)
    public func getStateChangeDeferral() throws -> ContentDeferral! {
        try _default.GetStateChangeDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.requestsize)
    public func requestSize(_ size: WindowsFoundation.Vector2) throws {
        try _default.RequestSize(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.actualsize)
    public var actualSize : WindowsFoundation.Vector2 {
        get { try! _default.get_ActualSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.appdata)
    public var appData : Any! {
        get { try! _default.get_AppData() }
        set { try! _default.put_AppData(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.coordinateconverter)
    public var coordinateConverter : ContentCoordinateConverter! {
        get { try! _default.get_CoordinateConverter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.customproperties)
    public var customProperties : WindowsFoundation.AnyIPropertySet! {
        get { try! _default.get_CustomProperties() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.environment)
    public var environment : ContentIslandEnvironment! {
        get { try! _default.get_Environment() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.id)
    public var id : UInt64 {
        get { try! _default.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.isconnected)
    public var isConnected : Bool {
        get { try! _default.get_IsConnected() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.ishittestvisiblewhentransparent)
    public var isHitTestVisibleWhenTransparent : Bool {
        get { try! _default.get_IsHitTestVisibleWhenTransparent() }
        set { try! _default.put_IsHitTestVisibleWhenTransparent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.isislandenabled)
    public var isIslandEnabled : Bool {
        get { try! _default.get_IsIslandEnabled() }
        set { try! _default.put_IsIslandEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.isislandvisible)
    public var isIslandVisible : Bool {
        get { try! _default.get_IsIslandVisible() }
        set { try! _default.put_IsIslandVisible(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.issiteenabled)
    public var isSiteEnabled : Bool {
        get { try! _default.get_IsSiteEnabled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.issitevisible)
    public var isSiteVisible : Bool {
        get { try! _default.get_IsSiteVisible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.layoutdirection)
    public var layoutDirection : ContentLayoutDirection {
        get { try! _default.get_LayoutDirection() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.rasterizationscale)
    public var rasterizationScale : Float {
        get { try! _default.get_RasterizationScale() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.automationproviderrequested)
    public lazy var automationProviderRequested : Event<TypedEventHandler<ContentIsland?, ContentIslandAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ContentIsland?, ContentIslandStateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StateChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StateChanged($0)
       }
      )
    }()

    private lazy var _IContentIsland2: __ABI_Microsoft_UI_Content.IContentIsland2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.children)
    public var children : WindowsFoundation.AnyIIterable<ChildSiteLink?>! {
        get { try! _IContentIsland2.get_Children() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.localtoclienttransformmatrix)
    public var localToClientTransformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _IContentIsland2.get_LocalToClientTransformMatrix() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.localtoparenttransformmatrix)
    public var localToParentTransformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _IContentIsland2.get_LocalToParentTransformMatrix() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.popups)
    public var popups : WindowsFoundation.AnyIIterable<DesktopPopupSiteBridge?>! {
        get { try! _IContentIsland2.get_Popups() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.processeskeyboardinput)
    public var processesKeyboardInput : Bool {
        get { try! _IContentIsland2.get_ProcessesKeyboardInput() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.processespointerinput)
    public var processesPointerInput : Bool {
        get { try! _IContentIsland2.get_ProcessesPointerInput() }
    }

    private lazy var _IContentIslandAutomation: __ABI_Microsoft_UI_Content.IContentIslandAutomation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.automationoption)
    public var automationOption : ContentAutomationOptions {
        get { try! _IContentIslandAutomation.get_AutomationOption() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.fragmentrootautomationprovider)
    public var fragmentRootAutomationProvider : Any! {
        get { try! _IContentIslandAutomation.get_FragmentRootAutomationProvider() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.nextsiblingautomationprovider)
    public var nextSiblingAutomationProvider : Any! {
        get { try! _IContentIslandAutomation.get_NextSiblingAutomationProvider() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.parentautomationprovider)
    public var parentAutomationProvider : Any! {
        get { try! _IContentIslandAutomation.get_ParentAutomationProvider() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.previoussiblingautomationprovider)
    public var previousSiblingAutomationProvider : Any! {
        get { try! _IContentIslandAutomation.get_PreviousSiblingAutomationProvider() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _IClosableNotifier: __ABI_Microsoft_UI.IClosableNotifier! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.isclosed)
    public var isClosed : Bool {
        get { try! _IClosableNotifier.get_IsClosed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.closed)
    public lazy var closed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.frameworkclosed)
    public lazy var frameworkClosed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_FrameworkClosed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_FrameworkClosed($0)
       }
      )
    }()

    private lazy var _ICompositionSupportsSystemBackdrop: __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdrop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentisland.systembackdrop)
    public var systemBackdrop : UWP.CompositionBrush! {
        get { try! _ICompositionSupportsSystemBackdrop.get_SystemBackdrop() }
        set { try! _ICompositionSupportsSystemBackdrop.put_SystemBackdrop(newValue) }
    }

    deinit {
        _default = nil
        _IContentIsland2 = nil
        _IContentIslandAutomation = nil
        _IClosable = nil
        _IClosableNotifier = nil
        _ICompositionSupportsSystemBackdrop = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandautomationproviderrequestedeventargs)
public final class ContentIslandAutomationProviderRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentIslandAutomationProviderRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentIslandAutomationProviderRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandautomationproviderrequestedeventargs.automationprovider)
    public var automationProvider : Any! {
        get { try! _default.get_AutomationProvider() }
        set { try! _default.put_AutomationProvider(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandautomationproviderrequestedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandenvironment)
open class ContentIslandEnvironment : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentIslandEnvironment
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentIslandEnvironment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentIslandEnvironmentFactory : __ABI_Microsoft_UI_Content.IContentIslandEnvironmentFactory =  try! RoGetActivationFactory("Microsoft.UI.Content.ContentIslandEnvironment")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandenvironment.appwindowid)
    public var appWindowId : WinAppSDK.WindowId {
        get { try! _default.get_AppWindowId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandenvironment.displayid)
    public var displayId : WinAppSDK.DisplayId {
        get { try! _default.get_DisplayId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandenvironment.settingchanged)
    public lazy var settingChanged : Event<TypedEventHandler<ContentIslandEnvironment?, ContentEnvironmentSettingChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SettingChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SettingChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandenvironment.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ContentIslandEnvironment?, ContentEnvironmentStateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StateChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StateChanged($0)
       }
      )
    }()

    private lazy var _IContentIslandEnvironment2: __ABI_Microsoft_UI_Content.IContentIslandEnvironment2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandenvironment.displayscale)
    public var displayScale : Float {
        get { try! _IContentIslandEnvironment2.get_DisplayScale() }
    }

    deinit {
        _default = nil
        _IContentIslandEnvironment2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs)
public final class ContentIslandStateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentIslandStateChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentIslandStateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didactualsizechange)
    public var didActualSizeChange : Bool {
        get { try! _default.get_DidActualSizeChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didlayoutdirectionchange)
    public var didLayoutDirectionChange : Bool {
        get { try! _default.get_DidLayoutDirectionChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didrasterizationscalechange)
    public var didRasterizationScaleChange : Bool {
        get { try! _default.get_DidRasterizationScaleChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didsiteenabledchange)
    public var didSiteEnabledChange : Bool {
        get { try! _default.get_DidSiteEnabledChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didsitevisiblechange)
    public var didSiteVisibleChange : Bool {
        get { try! _default.get_DidSiteVisibleChange() }
    }

    private lazy var _IContentIslandStateChangedEventArgs2: __ABI_Microsoft_UI_Content.IContentIslandStateChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didlocaltoclienttransformmatrixchange)
    public var didLocalToClientTransformMatrixChange : Bool {
        get { try! _IContentIslandStateChangedEventArgs2.get_DidLocalToClientTransformMatrixChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentislandstatechangedeventargs.didlocaltoparenttransformmatrixchange)
    public var didLocalToParentTransformMatrixChange : Bool {
        get { try! _IContentIslandStateChangedEventArgs2.get_DidLocalToParentTransformMatrixChange() }
    }

    deinit {
        _default = nil
        _IContentIslandStateChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteautomationproviderrequestedeventargs)
public final class ContentSiteAutomationProviderRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentSiteAutomationProviderRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentSiteAutomationProviderRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteautomationproviderrequestedeventargs.automationprovider)
    public var automationProvider : Any! {
        get { try! _default.get_AutomationProvider() }
        set { try! _default.put_AutomationProvider(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteautomationproviderrequestedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteenvironmentview)
open class ContentSiteEnvironmentView : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentSiteEnvironmentView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentSiteEnvironmentView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentSiteEnvironmentViewFactory : __ABI_Microsoft_UI_Content.IContentSiteEnvironmentViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Content.ContentSiteEnvironmentView")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteenvironmentview.appwindowid)
    public var appWindowId : WinAppSDK.WindowId {
        get { try! _default.get_AppWindowId() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteenvironmentview.displayid)
    public var displayId : WinAppSDK.DisplayId {
        get { try! _default.get_DisplayId() }
    }

    private lazy var _IContentSiteEnvironmentView2: __ABI_Microsoft_UI_Content.IContentSiteEnvironmentView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteenvironmentview.displayscale)
    public var displayScale : Float {
        get { try! _IContentSiteEnvironmentView2.get_DisplayScale() }
    }

    deinit {
        _default = nil
        _IContentSiteEnvironmentView2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview)
open class ContentSiteView : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IContentSiteView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIContentSiteView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentSiteViewFactory : __ABI_Microsoft_UI_Content.IContentSiteViewFactory =  try! RoGetActivationFactory("Microsoft.UI.Content.ContentSiteView")

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.actualsize)
    public var actualSize : WindowsFoundation.Vector2 {
        get { try! _default.get_ActualSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.clientsize)
    public var clientSize : UWP.SizeInt32 {
        get { try! _default.get_ClientSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.coordinateconverter)
    public var coordinateConverter : ContentCoordinateConverter! {
        get { try! _default.get_CoordinateConverter() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.environmentview)
    public var environmentView : ContentSiteEnvironmentView! {
        get { try! _default.get_EnvironmentView() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.isconnected)
    public var isConnected : Bool {
        get { try! _default.get_IsConnected() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.issiteenabled)
    public var isSiteEnabled : Bool {
        get { try! _default.get_IsSiteEnabled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.issitevisible)
    public var isSiteVisible : Bool {
        get { try! _default.get_IsSiteVisible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.layoutdirection)
    public var layoutDirection : ContentLayoutDirection {
        get { try! _default.get_LayoutDirection() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.overridescale)
    public var overrideScale : Float {
        get { try! _default.get_OverrideScale() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.parentscale)
    public var parentScale : Float {
        get { try! _default.get_ParentScale() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.rasterizationscale)
    public var rasterizationScale : Float {
        get { try! _default.get_RasterizationScale() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.requestedsize)
    public var requestedSize : WindowsFoundation.Vector2 {
        get { try! _default.get_RequestedSize() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.shouldapplyrasterizationscale)
    public var shouldApplyRasterizationScale : Bool {
        get { try! _default.get_ShouldApplyRasterizationScale() }
    }

    private lazy var _IContentSiteView2: __ABI_Microsoft_UI_Content.IContentSiteView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.localtoclienttransformmatrix)
    public var localToClientTransformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _IContentSiteView2.get_LocalToClientTransformMatrix() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.localtoparenttransformmatrix)
    public var localToParentTransformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _IContentSiteView2.get_LocalToParentTransformMatrix() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.processeskeyboardinput)
    public var processesKeyboardInput : Bool {
        get { try! _IContentSiteView2.get_ProcessesKeyboardInput() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.processespointerinput)
    public var processesPointerInput : Bool {
        get { try! _IContentSiteView2.get_ProcessesPointerInput() }
    }

    private lazy var _IContentSiteViewAutomation: __ABI_Microsoft_UI_Content.IContentSiteViewAutomation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.contentsiteview.automationoption)
    public var automationOption : ContentAutomationOptions {
        get { try! _IContentSiteViewAutomation.get_AutomationOption() }
    }

    deinit {
        _default = nil
        _IContentSiteView2 = nil
        _IContentSiteViewAutomation = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopchildsitebridge)
public final class DesktopChildSiteBridge : WinAppSDK.DesktopSiteBridge {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IDesktopChildSiteBridge
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIDesktopChildSiteBridge
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IDesktopChildSiteBridgeStatics: __ABI_Microsoft_UI_Content.IDesktopChildSiteBridgeStatics = try! RoGetActivationFactory("Microsoft.UI.Content.DesktopChildSiteBridge")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopchildsitebridge.create)
    public static func create(_ compositor: WinAppSDK.Compositor!, _ parentWindowId: WinAppSDK.WindowId) throws -> DesktopChildSiteBridge! {
        return try _IDesktopChildSiteBridgeStatics.Create(compositor, parentWindowId)
    }

    private static let _IDesktopChildSiteBridgeStatics2: __ABI_Microsoft_UI_Content.IDesktopChildSiteBridgeStatics2 = try! RoGetActivationFactory("Microsoft.UI.Content.DesktopChildSiteBridge")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopchildsitebridge.createwithdispatcherqueue)
    public static func createWithDispatcherQueue(_ queue: WinAppSDK.DispatcherQueue!, _ parentWindowId: WinAppSDK.WindowId) throws -> DesktopChildSiteBridge! {
        return try _IDesktopChildSiteBridgeStatics2.CreateWithDispatcherQueue(queue, parentWindowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopchildsitebridge.resizepolicy)
    public var resizePolicy : ContentSizePolicy {
        get { try! _default.get_ResizePolicy() }
        set { try! _default.put_ResizePolicy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopchildsitebridge.siteview)
    public var siteView : ContentSiteView! {
        get { try! _default.get_SiteView() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge)
public final class DesktopPopupSiteBridge : WinRTClass, WindowsFoundation.IClosable, WinAppSDK.IClosableNotifier, IContentSiteAutomation, IContentSiteBridge, IContentSiteLink {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IDesktopPopupSiteBridge
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIDesktopPopupSiteBridge
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IDesktopPopupSiteBridgeStatics: __ABI_Microsoft_UI_Content.IDesktopPopupSiteBridgeStatics = try! RoGetActivationFactory("Microsoft.UI.Content.DesktopPopupSiteBridge")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.create)
    public static func create(_ parent: ContentIsland!) throws -> DesktopPopupSiteBridge! {
        return try _IDesktopPopupSiteBridgeStatics.Create(parent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.connect)
    public func connect(_ content: ContentIsland!) throws {
        try _default.Connect(content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.disable)
    public func disable() throws {
        try _default.Disable()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.enable)
    public func enable() throws {
        try _default.Enable()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.hide)
    public func hide() throws {
        try _default.Hide()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.moveandresize)
    public func moveAndResize(_ rect: UWP.RectInt32) throws {
        try _default.MoveAndResize(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.moveinzorderatbottom)
    public func moveInZOrderAtBottom() throws {
        try _default.MoveInZOrderAtBottom()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.moveinzorderattop)
    public func moveInZOrderAtTop() throws {
        try _default.MoveInZOrderAtTop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.moveinzorderbelow)
    public func moveInZOrderBelow(_ windowId: WinAppSDK.WindowId) throws {
        try _default.MoveInZOrderBelow(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.show)
    public func show() throws {
        try _default.Show()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.isenabled)
    public var isEnabled : Bool {
        get { try! _default.get_IsEnabled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.siteview)
    public var siteView : ContentSiteView! {
        get { try! _default.get_SiteView() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.windowid)
    public var windowId : WinAppSDK.WindowId {
        get { try! _default.get_WindowId() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _IClosableNotifier: __ABI_Microsoft_UI.IClosableNotifier! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.isclosed)
    public var isClosed : Bool {
        get { try! _IClosableNotifier.get_IsClosed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.closed)
    public lazy var closed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.frameworkclosed)
    public lazy var frameworkClosed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_FrameworkClosed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_FrameworkClosed($0)
       }
      )
    }()

    private lazy var _IContentSiteAutomation: __ABI_Microsoft_UI_Content.IContentSiteAutomation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.automationoption)
    public var automationOption : ContentAutomationOptions {
        get { try! _IContentSiteAutomation.get_AutomationOption() }
        set { try! _IContentSiteAutomation.put_AutomationOption(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.automationprovider)
    public var automationProvider : Any! {
        get { try! _IContentSiteAutomation.get_AutomationProvider() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.fragmentrootautomationproviderrequested)
    public lazy var fragmentRootAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_FragmentRootAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_FragmentRootAutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.nextsiblingautomationproviderrequested)
    public lazy var nextSiblingAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_NextSiblingAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_NextSiblingAutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.parentautomationproviderrequested)
    public lazy var parentAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_ParentAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_ParentAutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.previoussiblingautomationproviderrequested)
    public lazy var previousSiblingAutomationProviderRequested : Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IContentSiteAutomation else { return .init() }
          return try! this.add_PreviousSiblingAutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._IContentSiteAutomation.remove_PreviousSiblingAutomationProviderRequested($0)
       }
      )
    }()

    private lazy var _IContentSiteBridge: __ABI_Microsoft_UI_Content.IContentSiteBridge! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _IContentSiteBridge.get_DispatcherQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.layoutdirectionoverride)
    public var layoutDirectionOverride : ContentLayoutDirection? {
        get { try! _IContentSiteBridge.get_LayoutDirectionOverride() }
        set { try! _IContentSiteBridge.put_LayoutDirectionOverride(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.overridescale)
    public var overrideScale : Float {
        get { try! _IContentSiteBridge.get_OverrideScale() }
        set { try! _IContentSiteBridge.put_OverrideScale(newValue) }
    }

    private lazy var _IContentSiteLink: __ABI_Microsoft_UI_Content.IContentSiteLink! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktoppopupsitebridge.parent)
    public var parent : ContentIsland! {
        get { try! _IContentSiteLink.get_Parent() }
    }

    deinit {
        _default = nil
        _IClosable = nil
        _IClosableNotifier = nil
        _IContentSiteAutomation = nil
        _IContentSiteBridge = nil
        _IContentSiteLink = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge)
open class DesktopSiteBridge : WinRTClass, WinAppSDK.IClosableNotifier, WindowsFoundation.IClosable, IContentSiteBridge {
    private typealias SwiftABI = __ABI_Microsoft_UI_Content.IDesktopSiteBridge
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CContent_CIDesktopSiteBridge
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDesktopSiteBridgeFactory : __ABI_Microsoft_UI_Content.IDesktopSiteBridgeFactory =  try! RoGetActivationFactory("Microsoft.UI.Content.DesktopSiteBridge")

    private static let _IDesktopSiteBridgeStatics: __ABI_Microsoft_UI_Content.IDesktopSiteBridgeStatics = try! RoGetActivationFactory("Microsoft.UI.Content.DesktopSiteBridge")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.issupported)
    public class func isSupported() throws -> Bool {
        return try _IDesktopSiteBridgeStatics.IsSupported()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.connect)
    public func connect(_ content: ContentIsland!) throws {
        try _default.Connect(content)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.disable)
    public func disable() throws {
        try _default.Disable()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.enable)
    public func enable() throws {
        try _default.Enable()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.hide)
    public func hide() throws {
        try _default.Hide()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.moveandresize)
    public func moveAndResize(_ rect: UWP.RectInt32) throws {
        try _default.MoveAndResize(rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.moveinzorderatbottom)
    public func moveInZOrderAtBottom() throws {
        try _default.MoveInZOrderAtBottom()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.moveinzorderattop)
    public func moveInZOrderAtTop() throws {
        try _default.MoveInZOrderAtTop()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.moveinzorderbelow)
    public func moveInZOrderBelow(_ windowId: WinAppSDK.WindowId) throws {
        try _default.MoveInZOrderBelow(windowId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.show)
    public func show() throws {
        try _default.Show()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.isenabled)
    public var isEnabled : Bool {
        get { try! _default.get_IsEnabled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.windowid)
    public var windowId : WinAppSDK.WindowId {
        get { try! _default.get_WindowId() }
    }

    private lazy var _IClosableNotifier: __ABI_Microsoft_UI.IClosableNotifier! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.isclosed)
    public var isClosed : Bool {
        get { try! _IClosableNotifier.get_IsClosed() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.closed)
    public lazy var closed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.frameworkclosed)
    public lazy var frameworkClosed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IClosableNotifier else { return .init() }
          return try! this.add_FrameworkClosed($0)
        },
        remove: { [weak self] in
         try? self?._IClosableNotifier.remove_FrameworkClosed($0)
       }
      )
    }()

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _IContentSiteBridge: __ABI_Microsoft_UI_Content.IContentSiteBridge! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _IContentSiteBridge.get_DispatcherQueue() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.layoutdirectionoverride)
    public var layoutDirectionOverride : ContentLayoutDirection? {
        get { try! _IContentSiteBridge.get_LayoutDirectionOverride() }
        set { try! _IContentSiteBridge.put_LayoutDirectionOverride(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.desktopsitebridge.overridescale)
    public var overrideScale : Float {
        get { try! _IContentSiteBridge.get_OverrideScale() }
        set { try! _IContentSiteBridge.put_OverrideScale(newValue) }
    }

    deinit {
        _default = nil
        _IClosableNotifier = nil
        _IClosable = nil
        _IContentSiteBridge = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation)
public protocol IContentSiteAutomation : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation.automationoption)
    var automationOption: WinAppSDK.ContentAutomationOptions { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation.automationprovider)
    var automationProvider: Any! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation.fragmentrootautomationproviderrequested)
    var fragmentRootAutomationProviderRequested: Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation.nextsiblingautomationproviderrequested)
    var nextSiblingAutomationProviderRequested: Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation.parentautomationproviderrequested)
    var parentAutomationProviderRequested: Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteautomation.previoussiblingautomationproviderrequested)
    var previousSiblingAutomationProviderRequested: Event<TypedEventHandler<IContentSiteAutomation?, ContentSiteAutomationProviderRequestedEventArgs?>> { get }
}

extension IContentSiteAutomation {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Content.IContentSiteAutomationWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Content.IContentSiteAutomationWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIContentSiteAutomation = any IContentSiteAutomation

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsitebridge)
public protocol IContentSiteBridge : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsitebridge.dispatcherqueue)
    var dispatcherQueue: WinAppSDK.DispatcherQueue! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsitebridge.layoutdirectionoverride)
    var layoutDirectionOverride: WinAppSDK.ContentLayoutDirection? { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsitebridge.overridescale)
    var overrideScale: Float { get set }
}

extension IContentSiteBridge {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Content.IContentSiteBridgeWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Content.IContentSiteBridgeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIContentSiteBridge = any IContentSiteBridge

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteinput)
public protocol IContentSiteInput : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteinput.processeskeyboardinput)
    var processesKeyboardInput: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsiteinput.processespointerinput)
    var processesPointerInput: Bool { get set }
}

extension IContentSiteInput {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Content.IContentSiteInputWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Content.IContentSiteInputWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIContentSiteInput = any IContentSiteInput

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsitelink)
public protocol IContentSiteLink : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.content.icontentsitelink.parent)
    var parent: WinAppSDK.ContentIsland! { get }
}

extension IContentSiteLink {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Content.IContentSiteLinkWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Content.IContentSiteLinkWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIContentSiteLink = any IContentSiteLink

extension WinAppSDK.ContentAutomationOptions {
    public static var none : WinAppSDK.ContentAutomationOptions {
        __x_ABI_CMicrosoft_CUI_CContent_CContentAutomationOptions_None
    }
    public static var frameworkBased : WinAppSDK.ContentAutomationOptions {
        __x_ABI_CMicrosoft_CUI_CContent_CContentAutomationOptions_FrameworkBased
    }
    public static var fragmentBased : WinAppSDK.ContentAutomationOptions {
        __x_ABI_CMicrosoft_CUI_CContent_CContentAutomationOptions_FragmentBased
    }
}
extension WinAppSDK.ContentAutomationOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.ContentCoordinateRoundingMode {
    public static var auto : WinAppSDK.ContentCoordinateRoundingMode {
        __x_ABI_CMicrosoft_CUI_CContent_CContentCoordinateRoundingMode_Auto
    }
    public static var floor : WinAppSDK.ContentCoordinateRoundingMode {
        __x_ABI_CMicrosoft_CUI_CContent_CContentCoordinateRoundingMode_Floor
    }
    public static var round : WinAppSDK.ContentCoordinateRoundingMode {
        __x_ABI_CMicrosoft_CUI_CContent_CContentCoordinateRoundingMode_Round
    }
    public static var ceiling : WinAppSDK.ContentCoordinateRoundingMode {
        __x_ABI_CMicrosoft_CUI_CContent_CContentCoordinateRoundingMode_Ceiling
    }
}
extension WinAppSDK.ContentCoordinateRoundingMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.ContentLayoutDirection {
    public static var leftToRight : WinAppSDK.ContentLayoutDirection {
        __x_ABI_CMicrosoft_CUI_CContent_CContentLayoutDirection_LeftToRight
    }
    public static var rightToLeft : WinAppSDK.ContentLayoutDirection {
        __x_ABI_CMicrosoft_CUI_CContent_CContentLayoutDirection_RightToLeft
    }
}
extension WinAppSDK.ContentLayoutDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension WinAppSDK.ContentSizePolicy {
    public static var none : WinAppSDK.ContentSizePolicy {
        __x_ABI_CMicrosoft_CUI_CContent_CContentSizePolicy_None
    }
    public static var resizeContentToParentWindow : WinAppSDK.ContentSizePolicy {
        __x_ABI_CMicrosoft_CUI_CContent_CContentSizePolicy_ResizeContentToParentWindow
    }
    public static var resizeParentWindowToContent : WinAppSDK.ContentSizePolicy {
        __x_ABI_CMicrosoft_CUI_CContent_CContentSizePolicy_ResizeParentWindowToContent
    }
}
extension WinAppSDK.ContentSizePolicy: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

